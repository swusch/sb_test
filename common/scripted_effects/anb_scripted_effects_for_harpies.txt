##### If you have any questions or would like to change something, please contact @Magnive on Discord.
### Here are some scripted effects that may be useful in a MT as potential effects.

# Country scope, allows the player to build an extra roost, but without increasing the development threshold for 
# building additional roosts.
harpy_roost_se_allow_construction_of_extra_roost = {
	custom_tooltip = harpy_roost_se_allow_construction_of_extra_roost_tt
	hidden_effect = {
		change_variable = { which = harpy_roost_var_free_roosts value = 1 }
		subtract_variable = { which = harpy_roost_var_next_threshold which = harpy_roost_var_dev_required }
	}
}

# Country scope, allows the player to build one fewer roost, if that is desired for some reason.
harpy_roost_se_negative_extra_roost = {
	custom_tooltip = harpy_roost_se_negative_extra_roost_tt
	hidden_effect = {
		change_variable = { which = harpy_roost_var_free_roosts value = -1 }
		change_variable = { which = harpy_roost_var_next_threshold which = harpy_roost_var_dev_required }
	}
}

# Changes the next threshold for making a flourishing roost by some variable amount.
# Country scope
harpy_roost_se_change_next_threshold = {
	hidden_effect = {
		change_variable = { which = harpy_roost_var_next_threshold value = $dev_progress$ }
		change_variable = { which = harpy_roost_var_total_threshold_change value = $dev_progress$ }
	}
}

# Various off-the-shelf effects for making the next flourishing roost easier or harder to build.
# All are country scope.
# If you make your own, remember to make a tooltip for it! :)
harpy_roost_se_reduce_next_threshold_25 = {
	harpy_roost_se_change_next_threshold = { dev_progress = -25 }
	custom_tooltip = harpy_roost_se_reduce_next_threshold_25_tt
}
harpy_roost_se_reduce_next_threshold_50 = {
	harpy_roost_se_change_next_threshold = { dev_progress = -50 }
	custom_tooltip = harpy_roost_se_reduce_next_threshold_50_tt
}
harpy_roost_se_reduce_next_threshold_75 = {
	harpy_roost_se_change_next_threshold = { dev_progress = -75 }
	custom_tooltip = harpy_roost_se_reduce_next_threshold_75_tt
}
harpy_roost_se_reduce_next_threshold_100 = {
	harpy_roost_se_change_next_threshold = { dev_progress = -100 }
	custom_tooltip = harpy_roost_se_reduce_next_threshold_100_tt
}
harpy_roost_se_reduce_next_threshold_125 = {
	harpy_roost_se_change_next_threshold = { dev_progress = -125 }
	custom_tooltip = harpy_roost_se_reduce_next_threshold_125_tt
}

harpy_roost_se_increase_next_threshold_25 = {
	harpy_roost_se_change_next_threshold = { dev_progress = 25 }
	custom_tooltip = harpy_roost_se_increase_next_threshold_25_tt
}
harpy_roost_se_increase_next_threshold_50 = {
	harpy_roost_se_change_next_threshold = { dev_progress = 50 }
	custom_tooltip = harpy_roost_se_increase_next_threshold_50_tt
}
harpy_roost_se_increase_next_threshold_75 = {
	harpy_roost_se_change_next_threshold = { dev_progress = 75 }
	custom_tooltip = harpy_roost_se_increase_next_threshold_75_tt
}
harpy_roost_se_increase_next_threshold_100 = {
	harpy_roost_se_change_next_threshold = { dev_progress = 100 }
	custom_tooltip = harpy_roost_se_increase_next_threshold_100_tt
}
harpy_roost_se_increase_next_threshold_125 = {
	harpy_roost_se_change_next_threshold = { dev_progress = 125 }
	custom_tooltip = harpy_roost_se_increase_next_threshold_125_tt
}



# Province scope, for adding a flourishing (tier 2) roost to a province, but without increasing the development 
# threshold for building additional roosts.
harpy_roost_se_add_free_flourishing_roost_to_province = {
	hidden_effect = { owner = { change_variable = { which = harpy_roost_var_free_roosts value = 1 } } }
	custom_tooltip = harpy_roost_se_add_free_flourishing_roost_to_province_tt
	if = { limit = { harpy_roost_st_has_non_fledgling_roost = yes }
		owner = { subtract_variable = { which = harpy_roost_var_next_threshold which = harpy_roost_var_dev_required } }
		custom_tooltip = harpy_roost_se_add_free_flourishing_roost_to_province_tt_already_has_roost
	}
	else = {
		remove_province_modifier = harpy_roost_mod_roost_fledgling 
		add_permanent_province_modifier = { name = harpy_roost_mod_roost_flourishing_active duration = -1 }
		harpy_roost_se_roost_terrain_offset_add = yes
		hidden_effect = { set_province_flag = harpy_roost_present }
	}
}

# Country scope, changes how much combined development (own plus that of vassals) is required to build new roosts.
# Also recalculates thresholds so that the cost works retroactively.
harpy_roost_se_set_dev_required = {
	set_variable = { which = harpy_roost_var_dev_required value = $new_dev_required$ }
	harpy_roost_se_recalculate = yes
}

# Country scope, sets a relative change in amount of development required to build new roosts.
# Also recalculates thresholds so that the cost works retroactively.
harpy_roost_se_adjust_dev_required = {
	change_variable = { which = harpy_roost_var_dev_required value = $dev_required_adjustment$ }
	harpy_roost_se_recalculate = yes
}

# Country scope, called when the primary culture of the country changes.
harpy_roost_se_on_primary_culture_changed_effect = {
	if = { limit = { culture_group = harpy }
		harpy_roost_se_setup = yes

		every_owned_province = {  limit = { has_province_modifier = harpy_roost_mod_roost_flourishing_inactive }
			harpy_roost_se_set_flourishing_roost_active = yes 
		}
	}
	else = { 
		every_owned_province = { limit = { has_province_flag = harpy_roost_present }
			if = { limit = { has_province_modifier = harpy_roost_mod_roost_fledgling }
				remove_province_modifier = harpy_roost_mod_roost_fledgling
				clr_province_flag = harpy_roost_present
			}
			else_if = { limit = { has_province_modifier = harpy_roost_mod_roost_flourishing_active }
				harpy_roost_se_set_flourishing_roost_inactive = yes
			}
		}
		every_owned_province = { limit = { has_province_modifier = harpy_roost_under_construction }
			harpy_roost_se_construction_cleanup = yes
		}
		clr_country_flag = harpy_roost_country_flag_roost_construction_ongoing
	}
}

### If you want to enable roosts to be built in new types of terrain, see harpy_roost_st_terrain_is_valid
### in common\scripted_triggers\and_scripted_triggers_for_harpies.txt for instructions.
# Province scope
harpy_roost_se_roost_terrain_offset_add = {
	trigger_switch = {
		on_trigger = has_terrain
		highlands 	= { add_permanent_province_modifier = { name = harpy_roost_mod_roost_terrain_offset_highlands 	duration = -1 } }
		hills 		= { add_permanent_province_modifier = { name = harpy_roost_mod_roost_terrain_offset_hills 		duration = -1 } }
		mountain 	= { add_permanent_province_modifier = { name = harpy_roost_mod_roost_terrain_offset_mountain 	duration = -1 } }
	}
}

# Province scope
harpy_roost_se_roost_terrain_offset_clear = {
	trigger_switch = {
		on_trigger = has_terrain
		highlands 	= { remove_province_modifier = harpy_roost_mod_roost_terrain_offset_highlands 	}
		hills 		= { remove_province_modifier = harpy_roost_mod_roost_terrain_offset_hills 		}
		mountain 	= { remove_province_modifier = harpy_roost_mod_roost_terrain_offset_mountain 	}
	}
}

### For instructions on how to allow a country to build tier 3 roosts, see harpy_roost_st_can_build_tier_3_roost_potential
### in common\scripted_triggers\and_scripted_triggers_for_harpies.txt.
# Province scope
harpy_roost_se_add_roost_tier_3 = {
	remove_province_modifier = harpy_roost_mod_roost_flourishing_active
	if = { limit = { FROM = { has_country_flag = mulen_can_build_foundations } }
		add_permanent_province_modifier = { name = mulen_hanging_city_foundation duration = -1 }
		FROM = { add_treasury = -500 }
	}
	if = { 
		limit = { 
			FROM = { 
				has_country_flag = Z88_hero_halls_1
			} 
		}
		add_permanent_province_modifier = { 
			name = Z88_t3_roost
			duration = -1 
		}
		FROM = { add_years_of_income = -0.25 add_yearly_manpower = -0.25 add_mil_power = -50
			hidden_effect = {
				change_variable = {
					which = Vaengheim_t3_roost_count
					value = 1
				}
			}
		}
	}
	if = { 
		limit = { 
			FROM = { 
				has_country_flag = Z88_hero_halls_2
			} 
		}
		add_permanent_province_modifier = { 
			name = Z88_t3_roost_upgraded
			duration = -1 
		}
		FROM = { add_years_of_income = -0.25 add_yearly_manpower = -0.25 add_mil_power = -50 
			hidden_effect = {
				change_variable = {
					which = Vaengheim_t3_roost_count
					value = 1
				}
			}
		}
	}
}

### Backend stuff, you probably do not need to look at anything below this line, but feel free to do so if you're curious.
# Country scope
harpy_roost_se_recalculate = {
	custom_tooltip = harpy_roost_se_recalculate_tt
	hidden_effect = {
		set_variable = { which = harpy_roost_var_next_threshold value = 0 }
		subtract_variable = { which = harpy_roost_var_next_threshold which = harpy_roost_var_dev_required }
		multiply_variable = { which = harpy_roost_var_next_threshold which = harpy_roost_var_free_roosts }
		change_variable = { which = harpy_roost_var_next_threshold which = harpy_roost_var_total_threshold_change }
		harpy_roost_se_count_current_roosts = yes
	}
}

# Country scope
harpy_roost_se_setup = {
	hidden_effect = {
		if = { limit = { NOT = { has_country_flag = harpy_roost_setup_completed } }
			set_variable = { which = harpy_roost_var_dev_required value = 150 } 
			set_variable = { which = harpy_roost_var_next_threshold value = 0 }
			set_variable = { which = harpy_roost_var_free_roosts value = 0 }
			set_variable = { which = harpy_roost_var_total_threshold_change value = 0 }
			harpy_roost_se_count_current_roosts = yes
			set_country_flag = harpy_roost_setup_completed
		}
	}
}

# Country scope
harpy_roost_se_count_current_roosts = {
	every_owned_province = { limit = { harpy_roost_st_has_non_fledgling_roost = yes }
		owner = { change_variable = { which = harpy_roost_var_next_threshold which = harpy_roost_var_dev_required } }
	}
}

# Province scope
harpy_roost_se_add_roost_tier_1 = {
	add_permanent_province_modifier = { name = harpy_roost_mod_roost_fledgling duration = -1 }
	FROM = { add_adm_power = -20 }
	hidden_effect = { set_province_flag = harpy_roost_present }
	if = { limit = { NOT = { culture_group = harpy } }
		add_harpy_minority_size_effect = yes
		add_harpy_minority_size_effect = yes
	}
	if = { #for bonus roost effects
		limit = {
			owner = {
				has_country_flag = harpy_roost_upgrade #set this to minimise unnecessary checks
			}
		}
		if = {
			limit = {
				owner = {
					has_country_flag = F27_roost_upgrade
				}
			}
			add_permanent_province_modifier = {
				name = F27_roost_upgrade_one
				duration = -1
			}
		}
	}
}

# Province scope.
harpy_roost_se_add_roost_tier_1_AI = {
	if = { 
		limit = { 
			owner = { 
				culture_group = harpy 
				ai = yes 
			}
			NOT = { has_province_flag = harpy_roost_present } 
			harpy_roost_st_terrain_is_valid = yes
		}
		harpy_roost_se_add_roost_tier_1 = yes
		add_$category$_power = 5
	}
}

# Province scope
harpy_roost_se_add_roost_tier_2 = {
	harpy_roost_se_add_roost_tier_2_free = yes
	FROM = { add_adm_power = -50 }
}

harpy_roost_se_add_roost_tier_2_free = {
	custom_tooltip = harpy_roost_construction_time
	add_permanent_province_modifier = { name = harpy_roost_under_construction duration = -1 }
	set_province_flag = harpy_roost_province_flag_under_construction
	if = { limit = { NOT = { culture_group = harpy } }
		add_harpy_minority_size_effect = yes
		custom_tooltip = province_will_convert_to_harpy_tt
	}
	FROM = { 
		change_variable = { which = harpy_roost_var_next_threshold which = harpy_roost_var_dev_required }
	}
	hidden_effect = { 
		FROM = { set_country_flag = harpy_roost_country_flag_roost_construction_ongoing }
		add_province_triggered_modifier = harpy_roost_ptm_mod_initial_setup_randomizer
	}
}

# Called in harpy_events.11.
harpy_roost_se_add_roost_tier_2_complete = {
	add_permanent_province_modifier = { name = harpy_roost_mod_roost_flourishing_active duration = -1 }
	harpy_roost_se_roost_terrain_offset_add = yes
	remove_province_modifier = harpy_roost_mod_roost_fledgling 
	remove_province_modifier = harpy_roost_under_construction
	if = { limit = { NOT = { culture_group = harpy } }
		change_culture = owner
	}
	if = { #for bonus roost effects
		limit = {
			owner = {
				has_country_flag = harpy_roost_upgrade #set this to minimise unnecessary checks
			}
		}
		if = {
			limit = {
				owner = {
					has_country_flag = F27_roost_upgrade
				}
			}
			remove_province_modifier = F27_roost_upgrade_one
			add_permanent_province_modifier = {
				name = F27_roost_upgrade_two
				duration = -1
			}
		}
	}
}

# Province scope.
harpy_roost_se_add_roost_tier_2_immediately = {
	if = { limit = { NOT = { harpy_roost_st_has_non_fledgling_roost = yes } }
		set_province_flag = harpy_roost_present
		remove_province_modifier = harpy_roost_mod_roost_fledgling
		add_permanent_province_modifier = { name = harpy_roost_mod_roost_flourishing_active duration = -1 }
		harpy_roost_se_roost_terrain_offset_add = yes

		if = { limit = { owner = { has_country_flag = harpy_roost_setup_completed } }
			change_variable = { which = harpy_roost_var_next_threshold which = harpy_roost_var_dev_required }
		}
		if = { limit = { NOT = { culture_group = harpy } }
			change_culture = owner
		}
		if = { #for bonus roost effects
			limit = {
				owner = {
					has_country_flag = harpy_roost_upgrade #set this to minimise unnecessary checks
				}
			}
			if = {
				limit = {
					owner = {
						has_country_flag = F27_roost_upgrade
					}
				}
				remove_province_modifier = F27_roost_upgrade_one
				add_permanent_province_modifier = {
					name = F27_roost_upgrade_two
					duration = -1
				}
			}
		}
	}
	else = {
		owner = { add_adm_power = 50 }
	}
}

# Province scope
harpy_roost_se_set_flourishing_roost_active = {
	if = { limit = { culture_group = harpy }
		remove_province_modifier = harpy_roost_mod_roost_flourishing_inactive
		add_permanent_province_modifier = { name = harpy_roost_mod_roost_flourishing_active duration = -1 }
		harpy_roost_se_roost_terrain_offset_add = yes
	}
}

# Province scope
harpy_roost_se_set_flourishing_roost_inactive = {
	remove_province_modifier = harpy_roost_mod_roost_flourishing_active 
	add_permanent_province_modifier = { name = harpy_roost_mod_roost_flourishing_inactive duration = -1 }
	harpy_roost_se_roost_terrain_offset_clear = yes
}

# Root = province, FROM = previous owner
harpy_roost_se_on_province_owner_change = {
	if = { limit = { has_province_flag = harpy_roost_present }
		harpy_roost_se_queens_throne_conquest = yes # Heunthume starts as Flourishing Roost, so this check can be thrown in here. Saves a bit of performance.

		if = { limit = { owner = { NOT = { culture_group = harpy } } }
			trigger_switch = {
				on_trigger = has_province_modifier

				harpy_roost_mod_roost_fledgling = { 
					remove_province_modifier = harpy_roost_mod_roost_fledgling 
					clr_province_flag = harpy_roost_present 
				}

				harpy_roost_mod_roost_flourishing_active = { 
					harpy_roost_se_set_flourishing_roost_inactive = yes
				}
			}
		}
		else_if = { limit = { NOT = { has_province_modifier = harpy_roost_mod_roost_fledgling } }
			owner = { harpy_roost_se_recalculate = yes }

			# If there's an inactive flourishing roost, activate it.
			if = { limit = { has_province_modifier = harpy_roost_mod_roost_flourishing_inactive }
				harpy_roost_se_set_flourishing_roost_active = yes
			}
		} 
	}
	if = { limit = { has_province_modifier = harpy_roost_under_construction }
		harpy_roost_se_construction_cleanup = { country_target = FROM }
	}
}

# Province scope, doesn't catch tier 3 right now, probably won't be relevant?
harpy_roost_se_destroy_roost = {
	if = { limit = { has_province_flag = harpy_roost_present }
		remove_province_modifier = harpy_roost_mod_roost_fledgling 
		remove_province_modifier = harpy_roost_mod_roost_flourishing_active 
		remove_province_modifier = harpy_roost_mod_roost_flourishing_inactive 
		clr_province_flag = harpy_roost_present
	}
}

harpy_roost_se_queens_throne_conquest = {
	if = { limit = { province_id = 660 }
		FROM = {
			if = { limit = { has_country_flag = harpy_roost_queens_throne_has_tier_3_free_roost }
				clr_country_flag = harpy_roost_queens_throne_has_tier_3_free_roost
				harpy_roost_se_negative_extra_roost = yes
			}
			if = { limit = { has_country_flag = harpy_roost_queens_throne_has_tier_2_free_roost }
				clr_country_flag = harpy_roost_queens_throne_has_tier_2_free_roost
				harpy_roost_se_negative_extra_roost = yes
			}
			if = { limit = { has_country_flag = harpy_roost_queens_throne_has_tier_1_free_roost }
				clr_country_flag = harpy_roost_queens_throne_has_tier_1_free_roost
				harpy_roost_se_negative_extra_roost = yes
			}
		}
		if = { 
			limit = { 
				has_great_project = { type = queens_throne tier = 3 } 
				NOT = { owner = { has_country_flag = harpy_roost_queens_throne_has_tier_3_free_roost } } 
			}
			owner = { 
				set_country_flag = harpy_roost_queens_throne_has_tier_3_free_roost
				harpy_roost_se_allow_construction_of_extra_roost = yes
			}
		}
		if = { 
			limit = { 
				has_great_project = { type = queens_throne tier = 2 } 
				NOT = { owner = { has_country_flag = harpy_roost_queens_throne_has_tier_2_free_roost } } 
			}
			owner = { 
				set_country_flag = harpy_roost_queens_throne_has_tier_2_free_roost
				harpy_roost_se_allow_construction_of_extra_roost = yes
			}
		}
		if = { 
			limit = { 
				has_great_project = { type = queens_throne tier = 1 } 
				NOT = { owner = { has_country_flag = harpy_roost_queens_throne_has_tier_1_free_roost } } 
			}
			owner = { 
				set_country_flag = harpy_roost_queens_throne_has_tier_1_free_roost
				harpy_roost_se_allow_construction_of_extra_roost = yes
			}
		}
	}	
}

# Root = province
harpy_roost_se_on_province_culture_changed = {
	if = { limit = { has_province_flag = harpy_roost_present }
		if = { 
			limit = { 
				NOT = { culture_group = harpy } 
				has_province_modifier = harpy_roost_mod_roost_flourishing_active 
			} 
			harpy_roost_se_set_flourishing_roost_inactive = yes
		}
		if = { 
			limit = { 
				culture_group = harpy 
				has_province_modifier = harpy_roost_mod_roost_flourishing_inactive 
				owner = { culture_group = harpy } 
			}
			harpy_roost_se_set_flourishing_roost_active = yes
		}
	}
}

harpy_roost_se_construction_cleanup = {
	clr_province_flag = had_harpy_event_3
	clr_province_flag = had_harpy_event_5
	clr_province_flag = had_harpy_event_8
	clr_province_flag = had_harpy_event_9
	clr_province_flag = had_harpy_event_10
	clr_province_flag = harpy_roost_province_flag_under_construction
	remove_province_modifier = harpy_roost_under_construction

	[[country_target] 
		$country_target$ = { 
			if = { limit = { NOT = { any_owned_province = { has_province_modifier = harpy_roost_under_construction } } }
				clr_country_flag = harpy_roost_country_flag_roost_construction_ongoing
			}
		}
	]
}