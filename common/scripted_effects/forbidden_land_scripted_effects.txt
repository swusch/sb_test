
lake_federation_gain_15_points = {
	custom_tooltip = lake_15_points_tooltip
	hidden_effect = {
		change_variable = {
			which = FederationPoints
			value = 15
		}
		every_country = {
			limit = { has_country_modifier = lake_federation_member }
			change_variable = {
				which = TotalFederationPoints
				value = 15
			}
		}
	}
}


lake_federation_gain_10_points = {
	custom_tooltip = lake_10_points_tooltip
	hidden_effect = {
		change_variable = {
			which = FederationPoints
			value = 10
		}
		every_country = {
			limit = { has_country_modifier = lake_federation_member }
			change_variable = {
				which = TotalFederationPoints
				value = 10
			}
		}
	}
}

lake_federation_gain_5_points = {
	custom_tooltip = lake_5_points_tooltip
	hidden_effect = {
		change_variable = {
			which = FederationPoints
			value = 5
		}
		every_country = {
			limit = { has_country_modifier = lake_federation_member }
			change_variable = {
				which = TotalFederationPoints
				value = 5
			}
		}
	}
}

lake_federation_gain_2_points = {
	custom_tooltip = lake_2_points_tooltip
	hidden_effect = {
		change_variable = {
			which = FederationPoints
			value = 2.5
		}
		every_country = {
			limit = { has_country_modifier = lake_federation_member }
			change_variable = {
				which = TotalFederationPoints
				value = 2.5
			}
		}
	}
}

lake_federation_gain_1_points = {
	custom_tooltip = lake_1_points_tooltip
	hidden_effect = {
		change_variable = {
			which = FederationPoints
			value = 1
		}
		every_country = {
			limit = { has_country_modifier = lake_federation_member }
			change_variable = {
				which = TotalFederationPoints
				value = 1
			}
		}
	}
}

lake_federation_lose_15_points = {
	custom_tooltip = lake_minus_15_points_tooltip
	hidden_effect = {
		subtract_variable = {
			which = FederationPoints
			value = 15
		}
		every_country = {
			limit = { has_country_modifier = lake_federation_member }
			subtract_variable = {
				which = TotalFederationPoints
				value = 15
			}
		}
	}
}

lake_federation_lose_10_points = {
	custom_tooltip = lake_minus_10_points_tooltip
	hidden_effect = {
		subtract_variable = {
			which = FederationPoints
			value = 10
		}
		every_country = {
			limit = { has_country_modifier = lake_federation_member }
			subtract_variable = {
				which = TotalFederationPoints
				value = 10
			}
		}
	}
}

lake_federation_lose_5_points = {
	custom_tooltip = lake_minus_5_points_tooltip
	hidden_effect = {
		subtract_variable = {
			which = FederationPoints
			value = 5
		}
		every_country = {
			limit = { has_country_modifier = lake_federation_member }
			subtract_variable = {
				which = TotalFederationPoints
				value = 5
			}
		}
	}
}

lake_federation_lose_2_points = {
	custom_tooltip = lake_minus_2_points_tooltip
	hidden_effect = {
		subtract_variable = {
			which = FederationPoints
			value = 2.5
		}
		every_country = {
			limit = { has_country_modifier = lake_federation_member }
			subtract_variable = {
				which = TotalFederationPoints
				value = 2.5
			}
		}
	}
}

lake_federation_lose_1_points = {
	custom_tooltip = lake_minus_1_points_tooltip
	hidden_effect = {
		subtract_variable = {
			which = FederationPoints
			value = 1
		}
		every_country = {
			limit = { has_country_modifier = lake_federation_member }
			subtract_variable = {
				which = TotalFederationPoints
				value = 1
			}
		}
	}
}

lake_federation_gain_politics = {
	if = {
		limit = { has_global_flag = federation_assembly_house_build }
		if = {
			limit = { any_owned_province = { has_province_modifier = federation_assembly_house } }
			hidden_effect = { change_variable = { FederationPolitics = 0.5 } }
			custom_tooltip = fed_politics_own_assembly_house_tooltip
		}
		if = {
			limit = { federation_has_high_standing = yes }
			hidden_effect = { change_variable = { FederationPolitics = 1.5 } }
			custom_tooltip = fed_politics_high_standing_tooltip
		}
		else = {
			hidden_effect = { change_variable = { FederationPolitics = 1 } }
			custom_tooltip = fed_politics_tooltip
		}
		if = {
			limit = { has_country_modifier = victor_fed_religious_war }
			hidden_effect = { change_variable = { FederationPolitics = 0.5 } }
			custom_tooltip = fed_politics_religious_war_winner_tooltip
		}
		if = {
			limit = { any_owned_province = { has_province_modifier = federation_central_bank } }
			hidden_effect = { change_variable = { FederationPolitics = 0.5 } }
			custom_tooltip = fed_politics_own_central_bank_tooltip
		}
	}
}

lake_federation_lose_1_politics = {
	custom_tooltip = lose_federation_1_politic_tooltip
	hidden_effect = { subtract_variable = { FederationPolitics = 1 } }
}

lake_federation_lose_2_politics = {
	custom_tooltip = lose_federation_2_politic_tooltip
	hidden_effect = { subtract_variable = { FederationPolitics = 2 } }
}

lake_federation_lose_3_politics = {
	custom_tooltip = lose_federation_3_politic_tooltip
	hidden_effect = { subtract_variable = { FederationPolitics = 3 } }
}

lake_federation_lose_4_politics = {
	custom_tooltip = lose_federation_4_politic_tooltip
	hidden_effect = { subtract_variable = { FederationPolitics = 4 } }
}

lake_federation_lose_5_politics = {
	custom_tooltip = lose_federation_5_politic_tooltip
	hidden_effect = { subtract_variable = { FederationPolitics = 5 } }
}

lake_federation_lose_7_politics = {
	custom_tooltip = lose_federation_7_politic_tooltip
	hidden_effect = { subtract_variable = { FederationPolitics = 7 } }
}

clear_federation_global_flag = {
	clr_global_flag = lake_linguistic_academy
	clr_global_flag = lake_islander_declaration
	clr_global_flag = lake_clothing_for_everyone
	clr_global_flag = lake_agricultural_reform
	clr_global_flag = lake_preservation_act
	clr_global_flag = lake_judiciary_system
	clr_global_flag = lake_federation_artisan
	clr_global_flag = lake_implement_regulation
	clr_global_flag = lake_every_man_a_landlord
	clr_global_flag = lake_the_federation_needs
	clr_global_flag = lake_a_united_federation
	clr_global_flag = lake_free_trade
	clr_global_flag = lake_the_place_of_everyone
	clr_global_flag = lake_federation_soldier_first
	clr_global_flag = lake_military_reform
	clr_global_flag = lake_the_mainland_question
	#clr_global_flag = lake_the_pirate_act
	clr_global_flag = lake_cohesion_1
	clr_global_flag = lake_cohesion_2
	clr_global_flag = lake_cohesion_3
	clr_global_flag = lake_cohesion_4
	clr_global_flag = lake_cohesion_5
	clr_global_flag = federation_crisis
	clr_country_flag = federation_mil_article_1
	clr_country_flag = federation_industry_article_1
	clr_country_flag = federation_trade_article_1
	clr_country_flag = federation_mil_article_2
	clr_country_flag = federation_industry_article_2
	clr_country_flag = federation_trade_article_2
	clr_country_flag = federation_mil_article_3
	clr_country_flag = federation_industry_article_3
	clr_country_flag = federation_trade_article_3
	clr_country_flag = federation_mil_article_4
	clr_country_flag = federation_industry_article_4
	clr_country_flag = federation_trade_article_4
	clr_country_flag = federation_mil_article_5
	clr_country_flag = federation_industry_article_5
	clr_country_flag = federation_trade_article_5
	clr_country_flag = federation_mil_article_6
	clr_country_flag = federation_industry_article_6
	clr_country_flag = federation_trade_article_6
	clr_country_flag = federation_mil_article_7
	clr_country_flag = federation_industry_article_7
	clr_country_flag = federation_trade_article_7
	clr_country_flag = federation_mil_article_8
	clr_country_flag = federation_industry_article_8
	clr_country_flag = federation_trade_article_8
	clr_country_flag = building_museum
	clr_country_flag = federation_cohesion_triumph
	clr_country_flag = cohesion_J49_former
	clr_country_flag = cohesion_J50_former
	clr_country_flag = cohesion_J51_former
	clr_country_flag = cohesion_J52_former
	clr_country_flag = cohesion_J53_former
	clr_country_flag = cohesion_rejected_formation
	hidden_effect = {
		remove_country_modifier = lake_federation_member
		remove_country_modifier = lake_federation_5_cohesion
		remove_country_modifier = federation_mainland_operation
		remove_country_modifier = lake_military_marine
		remove_country_modifier = lake_commercial_marine
		remove_country_modifier = ultakal_decree
		remove_country_modifier = federation_islander_declaration
		remove_country_modifier = lake_trade
		remove_country_modifier = lake_diplomatic_corps
		remove_country_modifier = federation_linguistic_academy
		remove_country_modifier = lake_growing_administration
		remove_country_modifier = lake_mainland_trade_established
		remove_country_modifier = federation_judiciary_system
		remove_country_modifier = federation_free_trade
		remove_country_modifier = federation_fighter
		remove_country_modifier = federation_subventionner
		#remove_country_modifier = federation_leecher_mod
		remove_country_modifier = federation_fighter_conscription
		remove_country_modifier = federation_conscription
		remove_country_modifier = federation_military_reform
		remove_country_modifier = federation_war_mandat
		remove_country_modifier = federation_cutdown
		remove_country_modifier = lake_ideas_melting_pot
		remove_country_modifier = lake_federation_observer
		remove_country_modifier = lake_cover_piracy
		remove_country_modifier = lake_anti_piracy_act
		remove_country_modifier = lake_caravan_act
		remove_country_modifier = lake_unrestricted_trade_route
		remove_country_modifier = victor_fed_religious_war
		remove_country_modifier = loser_fed_religious_war
		remove_country_modifier = lake_strike_hard
		remove_country_modifier = lake_attrition_war
	}
}

centaur_colonization = {
	# custom_tooltip = centaur_colonization_tooltip
	hidden_effect = {
		random_owned_province = {
			limit = { has_empty_adjacent_province = yes is_city = yes superregion = forbidden_lands_superregion }
			random_empty_neighbor_province = {
				limit = { is_city = no superregion = forbidden_lands_superregion NOT = { has_province_modifier = cant_colonize } }
				create_colony = 1000
				random_list = {
					50 = {
						add_base_tax = 1
						add_base_manpower = 1
					}
					50 = {
						add_base_manpower = 2
					}
					50 = {
						add_base_production = 1
						add_base_manpower = 1
					}
				}
				add_core = ROOT
			}
		}
	}
}

centaur_battle_count_win = {
	if = {
		limit = { has_country_modifier = centaur_administration }
		change_variable = { nbCharge = 1 }
		change_variable = { totalBattle = 1 }
		set_variable = {
			which = battleWinRate
			which = nbCharge
		}
		divide_variable = {
			which = battleWinRate
			which = totalBattle
		}
		multiply_variable = {
			which = battleWinRate
			value = 100
		}
		if = {
			limit = { FROM = { has_country_modifier = human_military } }
			change_variable = { nbBattleHuman = 1 }
		}
		else_if = {
			limit = { FROM = { has_country_modifier = dwarven_military } }
			change_variable = { nbBattleDwarf = 1 }
		}
		else_if = {
			limit = { FROM = { has_country_modifier = elven_military } }
			change_variable = { nbBattleElf = 1 }
		}
		else_if = {
			limit = { FROM = { has_country_modifier = ogre_military } }
			change_variable = { nbBattleOgre = 1 }
		}
		else_if = {
			limit = { FROM = { has_country_modifier = orcish_military } }
			change_variable = { nbBattleOrc = 1 }
		}
		else_if = {
			limit = { FROM = { has_country_modifier = hobgoblin_military } }
			change_variable = { nbBattleHobgoblin = 1 }
		}
		else_if = {
			limit = { FROM = { has_country_modifier = harimari_military } }
			change_variable = { nbBattleHarimari = 1 }
		}
		else_if = {
			limit = { FROM = { has_country_modifier = kobold_military } }
			change_variable = { nbBattleKobold = 1 }
		}
		else_if = {
			limit = { FROM = { has_country_modifier = goblin_military } }
			change_variable = { nbBattleGoblin = 1 }
		}
		else_if = {
			limit = { FROM = { has_country_modifier = gnomish_military } }
			change_variable = { nbBattleGnome = 1 }
		}
	}
	
}

centaur_battle_count_lost = {
	if = {
		limit = { has_country_modifier = centaur_administration }
		change_variable = { nbChargeLose = 1 }
		change_variable = { totalBattle = 1 }
		set_variable = {
			which = battleWinRate
			which = nbCharge
		}
		divide_variable = {
			which = battleWinRate
			which = totalBattle
		}
		multiply_variable = {
			which = battleWinRate
			value = 100
		}
	}
}

centaur_battle_won = {
	ROOT = {
		if = { 
			limit = { has_estate_privilege = estate_monstrous_tribes_caehns_valor }
			set_variable = {
				which = centaur_horde_unity
				value = 0
			}
			export_to_variable = {
				which = centaur_horde_unity
				value = trigger_value:horde_unity
				who = ROOT
			}
			if = {
				limit = { has_country_flag = centaur_caehns_valor_3 }
				multiply_variable = {
					which = centaur_horde_unity
					value = 6
				}
			}
			else_if = {
				limit = { has_country_flag = centaur_caehns_valor_2 }
				multiply_variable = {
					which = centaur_horde_unity
					value = 4
				}
			}
			else_if = {
				limit = { has_country_flag = centaur_caehns_valor_1 }
				multiply_variable = {
					which = centaur_horde_unity
					value = 2
				}
			}
			while = {
				limit = {
					check_variable = {
						which = centaur_horde_unity
						value = 1
					}
				}
				subtract_variable = {
					which = centaur_horde_unity
					value = 1
				}
				add_manpower = 0.001
			}
		}
	}
}

centaur_siege_won = {
	ROOT = {
		if = { 
			limit = { 
				has_estate_privilege = estate_monstrous_tribes_caehns_valor 
				FROM = { fort_level = 1 }
			}
			set_variable = {
				which = centaur_horde_unity
				value = 0
			}
			export_to_variable = {
				which = centaur_horde_unity
				value = trigger_value:horde_unity
				who = ROOT
			}
			if = {
				limit = { has_country_flag = centaur_caehns_valor_3 }
				multiply_variable = {
					which = centaur_horde_unity
					value = 12
				}
			}
			else_if = {
				limit = { has_country_flag = centaur_caehns_valor_2 }
				multiply_variable = {
					which = centaur_horde_unity
					value = 8
				}
			}
			else_if = {
				limit = { has_country_flag = centaur_caehns_valor_1 }
				multiply_variable = {
					which = centaur_horde_unity
					value = 4
				}
			}
			while = {
				limit = {
					check_variable = {
						which = centaur_horde_unity
						value = 1
					}
				}
				subtract_variable = {
					which = centaur_horde_unity
					value = 1
				}
				add_manpower = 0.001
			}
		}
	}
}

federation_representative_setup = {
	#Kodave Representative
	random_country = {
		limit = {
			has_country_flag = kodave_faction
		}
		save_event_target_as = kodaveRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = kodave_faction
			federation_has_low_standing = yes
		}
		save_event_target_as = kodaveRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = kodave_faction
			federation_has_normal_standing = yes
		}
		save_event_target_as = kodaveRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = kodave_faction
			federation_has_high_standing = yes
		}
		save_event_target_as = kodaveRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = kodave_faction
			federation_has_very_high_standing = yes
		}
		save_event_target_as = kodaveRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = kodave_faction
			is_lake_federation_leader = yes
		}
		save_event_target_as = kodaveRepresentative
	}
	event_target:kodaveRepresentative = {
		set_country_flag = kodave_leader
		set_variable = { FedWarWin = 0 }
	}
	#Enuuk Representative
	random_country = {
		limit = {
			has_country_flag = enuuk_faction
		}
		save_event_target_as = enuukRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = enuuk_faction
			federation_has_low_standing = yes
		}
		save_event_target_as = enuukRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = enuuk_faction
			federation_has_normal_standing = yes
		}
		save_event_target_as = enuukRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = enuuk_faction
			federation_has_high_standing = yes
		}
		save_event_target_as = enuukRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = enuuk_faction
			federation_has_very_high_standing = yes
		}
		save_event_target_as = enuukRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = enuuk_faction
			is_lake_federation_leader = yes
		}
		save_event_target_as = enuukRepresentative
	}
	event_target:enuukRepresentative = {
		set_country_flag = enuuk_leader
		set_variable = { FedWarWin = 0 }
	}
	#Yukel Representative
	random_country = {
		limit = {
			has_country_flag = yukel_faction
		}
		save_event_target_as = yukelRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = yukel_faction
			federation_has_low_standing = yes
		}
		save_event_target_as = yukelRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = yukel_faction
			federation_has_normal_standing = yes
		}
		save_event_target_as = yukelRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = yukel_faction
			federation_has_high_standing = yes
		}
		save_event_target_as = yukelRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = yukel_faction
			federation_has_very_high_standing = yes
		}
		save_event_target_as = yukelRepresentative
	}
	random_country = {
		limit = {
			has_country_flag = yukel_faction
			is_lake_federation_leader = yes
		}
		save_event_target_as = yukelRepresentative
	}
	event_target:yukelRepresentative = {
		set_country_flag = yukel_leader
		set_variable = { FedWarWin = 0 }
	}
}

#federation_triunic_goddess_apostle = {
#	hidden_effect = {
#		random_country = {
#			limit = { has_country_modifier = lake_federation_member ai = yes }
#			save_event_target_as = triunic_goddess
#		}
#		random_country = {
#			limit = { has_country_flag = yukel_faction ai = yes }
#			save_event_target_as = triunic_goddess
#		}
#		random_country = {
#			limit = { has_country_flag = yukel_leader ai = yes }
#			save_event_target_as = triunic_goddess
#		}
#		random_country = {
#			limit = { has_country_modifier = lake_federation_member ai = no }
#			save_event_target_as = triunic_goddess
#		}
#		random_country = {
#			limit = { has_country_flag = yukel_faction ai = no }
#			save_event_target_as = triunic_goddess
#		}
#		random_country = {
#			limit = { has_country_flag = yukel_leader ai = no }
#			save_event_target_as = triunic_goddess
#		}
#		clr_global_flag = fed_religious_war
#		event_target:triunic_goddess = { country_event = { id = fed_religious.18 days = 7300 } }
#	}
#}

kalyin_representative_setup = {
	random_country = {
		limit = {
			religion = kalyin_worshippers
		}
		save_event_target_as = kalyinRepresentative
	}
	random_country = {
		limit = {
			religion = kalyin_worshippers
			federation_has_low_standing = yes
		}
		save_event_target_as = kalyinRepresentative
	}
	random_country = {
		limit = {
			religion = kalyin_worshippers
			federation_has_normal_standing = yes
		}
		save_event_target_as = kalyinRepresentative
	}
	random_country = {
		limit = {
			religion = kalyin_worshippers
			federation_has_high_standing = yes
		}
		save_event_target_as = kalyinRepresentative
	}
	random_country = {
		limit = {
			religion = kalyin_worshippers
			federation_has_very_high_standing = yes
		}
		save_event_target_as = kalyinRepresentative
	}
	random_country = {
		limit = {
			religion = kalyin_worshippers
			is_lake_federation_leader = yes
		}
		save_event_target_as = kalyinRepresentative
	}
}

increase_kodave_resolve_20 = {
	custom_tooltip = increase_kodave_resolve_20_tooltip
	hidden_effect = { REB = { change_variable = { kodave_resolve = 20 } } }
}

increase_kodave_resolve_10 = {
	custom_tooltip = increase_kodave_resolve_10_tooltip
	hidden_effect = { REB = { change_variable = { kodave_resolve = 10 } } }
}

increase_kodave_resolve_5 = {
	custom_tooltip = increase_kodave_resolve_5_tooltip
	hidden_effect = { REB = { change_variable = { kodave_resolve = 5 } } }
}

decrease_kodave_resolve_20 = {
	custom_tooltip = decrease_kodave_resolve_20_tooltip
	hidden_effect = { REB = { subtract_variable = { kodave_resolve = 20 } } }
}

decrease_kodave_resolve_10 = {
	custom_tooltip = decrease_kodave_resolve_10_tooltip
	hidden_effect = { REB = { subtract_variable = { kodave_resolve = 10 } } }
}

decrease_kodave_resolve_5 = {
	custom_tooltip = decrease_kodave_resolve_5_tooltip
	hidden_effect = { REB = { subtract_variable = { kodave_resolve = 5 } } }
}

increase_enuuk_resolve_20 = {
	custom_tooltip = increase_enuuk_resolve_20_tooltip
	hidden_effect = { REB = { change_variable = { enuuk_resolve = 20 } } }
}

increase_enuuk_resolve_10 = {
	custom_tooltip = increase_enuuk_resolve_10_tooltip
	hidden_effect = { REB = { change_variable = { enuuk_resolve = 10 } } }
}

increase_enuuk_resolve_5 = {
	custom_tooltip = increase_enuuk_resolve_5_tooltip
	hidden_effect = { REB = { change_variable = { enuuk_resolve = 5 } } }
}

decrease_enuuk_resolve_20 = {
	custom_tooltip = decrease_enuuk_resolve_20_tooltip
	hidden_effect = { REB = { subtract_variable = { enuuk_resolve = 20 } } }
}

decrease_enuuk_resolve_10 = {
	custom_tooltip = decrease_enuuk_resolve_10_tooltip
	hidden_effect = { REB = { subtract_variable = { enuuk_resolve = 10 } } }
}

decrease_enuuk_resolve_5 = {
	custom_tooltip = decrease_enuuk_resolve_5_tooltip
	hidden_effect = { REB = { subtract_variable = { enuuk_resolve = 5 } } }
}

increase_yukel_resolve_20 = {
	custom_tooltip = increase_yukel_resolve_20_tooltip
	hidden_effect = { REB = { change_variable = { yukel_resolve = 20 } } }
}

increase_yukel_resolve_10 = {
	custom_tooltip = increase_yukel_resolve_10_tooltip
	hidden_effect = { REB = { change_variable = { yukel_resolve = 10 } } }
}

increase_yukel_resolve_5 = {
	custom_tooltip = increase_yukel_resolve_5_tooltip
	hidden_effect = { REB = { change_variable = { yukel_resolve = 5 } } }
}

decrease_yukel_resolve_20 = {
	custom_tooltip = decrease_yukel_resolve_20_tooltip
	hidden_effect = { REB = { subtract_variable = { yukel_resolve = 20 } } }
}

decrease_yukel_resolve_10 = {
	custom_tooltip = decrease_yukel_resolve_10_tooltip
	hidden_effect = { REB = { subtract_variable = { yukel_resolve = 10 } } }
}

decrease_yukel_resolve_5 = {
	custom_tooltip = decrease_yukel_resolve_5_tooltip
	hidden_effect = { REB = { subtract_variable = { yukel_resolve = 5 } } }
}

decrease_enuuk_resolve_1 = {
	custom_tooltip = decrease_enuuk_resolve_1_tooltip
	hidden_effect = { REB = { subtract_variable = { enuuk_resolve = 1 } } }
}

decrease_yukel_resolve_1 = {
	custom_tooltip = decrease_yukel_resolve_1_tooltip
	hidden_effect = { REB = { subtract_variable = { yukel_resolve = 1 } } }
}

decrease_kodave_resolve_1 = {
	custom_tooltip = decrease_kodave_resolve_1_tooltip
	hidden_effect = { REB = { subtract_variable = { kodave_resolve = 1 } } }
}

increase_yukel_resolve_1 = {
	custom_tooltip = increase_yukel_resolve_1_tooltip
	hidden_effect = { REB = { change_variable = { yukel_resolve = 1 } } }
}

increase_kodave_resolve_1 = {
	custom_tooltip = increase_kodave_resolve_1_tooltip
	hidden_effect = { REB = { change_variable = { kodave_resolve = 1 } } }
}

increase_enuuk_resolve_1 = {
	custom_tooltip = increase_enuuk_resolve_1_tooltip
	hidden_effect = { REB = { change_variable = { enuuk_resolve = 1 } } }
}

clr_lake_religious_war_flag = {
	clr_country_flag = yukel_faction
	clr_country_flag = enuuk_faction
	clr_country_flag = kodave_faction
	clr_country_flag = yukel_leader
	clr_country_flag = kodave_leader
	clr_country_flag = enuuk_leader
}

kill_all_centaur = {
	change_culture = ROOT
	change_religion = ROOT
	add_devastation = 85
	random_list = {
		50 = { add_base_manpower = -1 }
		30 = { add_base_manpower = -2 }
		20 = { add_base_manpower = -3 }
	}
	owner = { add_years_of_income = -0.05 }
	remove_racial_majority = { race = centaur }
	remove_racial_minority_any_size = { race = centaur }
}

# governing_point_adm = {
# 	if = {
# 		limit = { has_enough_governing_point = yes }
# 		add_base_tax = 1
# 		trigger_switch = {
# 			on_trigger = development
# 			70 = { owner = { subtract_variable = { governing_points = 100 } } }
# 			65 = { owner = { subtract_variable = { governing_points = 90 } } }
# 			60 = { owner = { subtract_variable = { governing_points = 75 } } }
# 			55 = { owner = { subtract_variable = { governing_points = 60 } } }
# 			50 = { owner = { subtract_variable = { governing_points = 50 } } }
# 			40 = { owner = { subtract_variable = { governing_points = 40 } } }
# 			30 = { owner = { subtract_variable = { governing_points = 30 } } }
# 			20 = { owner = { subtract_variable = { governing_points = 20 } } }
# 			10 = { owner = { subtract_variable = { governing_points = 10 } } }
# 			3 = { owner = { subtract_variable = { governing_points = 3 } } }
# 		}
# 	}
# }

# governing_point_dip = {
# 	if = {
# 		limit = { has_enough_governing_point = yes }
# 		add_base_production = 1
# 		trigger_switch = {
# 			on_trigger = development
# 			70 = { owner = { subtract_variable = { governing_points = 100 } } }
# 			65 = { owner = { subtract_variable = { governing_points = 90 } } }
# 			60 = { owner = { subtract_variable = { governing_points = 75 } } }
# 			55 = { owner = { subtract_variable = { governing_points = 60 } } }
# 			50 = { owner = { subtract_variable = { governing_points = 50 } } }
# 			40 = { owner = { subtract_variable = { governing_points = 40 } } }
# 			30 = { owner = { subtract_variable = { governing_points = 30 } } }
# 			20 = { owner = { subtract_variable = { governing_points = 20 } } }
# 			10 = { owner = { subtract_variable = { governing_points = 10 } } }
# 			3 = { owner = { subtract_variable = { governing_points = 3 } } }
# 		}
# 	}
# }

# governing_point_mil = {
# 	if = {
# 		limit = { has_enough_governing_point = yes }
# 		add_base_manpower = 1
# 		trigger_switch = {
# 			on_trigger = development
# 			70 = { owner = { subtract_variable = { governing_points = 100 } } }
# 			65 = { owner = { subtract_variable = { governing_points = 90 } } }
# 			60 = { owner = { subtract_variable = { governing_points = 75 } } }
# 			55 = { owner = { subtract_variable = { governing_points = 60 } } }
# 			50 = { owner = { subtract_variable = { governing_points = 50 } } }
# 			40 = { owner = { subtract_variable = { governing_points = 40 } } }
# 			30 = { owner = { subtract_variable = { governing_points = 30 } } }
# 			20 = { owner = { subtract_variable = { governing_points = 20 } } }
# 			10 = { owner = { subtract_variable = { governing_points = 10 } } }
# 			3 = { owner = { subtract_variable = { governing_points = 3 } } }
# 		}
# 	}
# }

lake_legislative_work_effect = {
	trigger_switch = {
		on_trigger = adm
		
		6 = { add_country_modifier = { name = lake_legislative_work duration = 1825 } }
		5 = { add_country_modifier = { name = lake_legislative_work duration = 2190 } }
		4 = { add_country_modifier = { name = lake_legislative_work duration = 2555 } }
		3 = { add_country_modifier = { name = lake_legislative_work duration = 2920 } }
		2 = { add_country_modifier = { name = lake_legislative_work duration = 3285 } }
		1 = { add_country_modifier = { name = lake_legislative_work duration = 3650 } }
		0 = { add_country_modifier = { name = lake_legislative_work duration = 4015 } }
	}
}

refresh_religious_war_leader = {
	hidden_effect = {
		if = {
			limit = { event_target:global_enuuk_leader = { exists = no } }
			#Enuuk Representative
			random_country = {
				limit = {
					has_country_flag = enuuk_faction
				}
				save_global_event_target_as = global_enuuk_leader
			}
			random_country = {
				limit = {
					has_country_flag = enuuk_faction
					federation_has_low_standing = yes
				}
				save_global_event_target_as = global_enuuk_leader
			}
			random_country = {
				limit = {
					has_country_flag = enuuk_faction
					federation_has_normal_standing = yes
				}
				save_global_event_target_as = global_enuuk_leader
			}
			random_country = {
				limit = {
					has_country_flag = enuuk_faction
					federation_has_high_standing = yes
				}
				save_global_event_target_as = global_enuuk_leader
			}
			random_country = {
				limit = {
					has_country_flag = enuuk_faction
					federation_has_very_high_standing = yes
				}
				save_global_event_target_as = global_enuuk_leader
			}
			random_country = {
				limit = {
					has_country_flag = enuuk_faction
					is_lake_federation_leader = yes
				}
				save_global_event_target_as = global_enuuk_leader
			}
			event_target:global_enuuk_leader = { set_country_flag = enuuk_leader }
		}
		
		if = {
			limit = { event_target:global_kodave_leader = { exists = no } }
			#Kodave Representative
			random_country = {
				limit = {
					has_country_flag = kodave_faction
				}
				save_global_event_target_as = global_kodave_leader
			}
			random_country = {
				limit = {
					has_country_flag = kodave_faction
					federation_has_low_standing = yes
				}
				save_global_event_target_as = global_kodave_leader
			}
			random_country = {
				limit = {
					has_country_flag = kodave_faction
					federation_has_normal_standing = yes
				}
				save_global_event_target_as = global_kodave_leader
			}
			random_country = {
				limit = {
					has_country_flag = kodave_faction
					federation_has_high_standing = yes
				}
				save_global_event_target_as = global_kodave_leader
			}
			random_country = {
				limit = {
					has_country_flag = kodave_faction
					federation_has_very_high_standing = yes
				}
				save_global_event_target_as = global_kodave_leader
			}
			random_country = {
				limit = {
					has_country_flag = kodave_faction
					is_lake_federation_leader = yes
				}
				save_global_event_target_as = global_kodave_leader
			}
			event_target:global_kodave_leader = { set_country_flag = kodave_leader }
		}
		if = {
			limit = { event_target:global_yukel_leader = { exists = no } }
			#yukel Representative
			random_country = {
				limit = {
					has_country_flag = yukel_faction
				}
				save_global_event_target_as = global_yukel_leader
			}
			random_country = {
				limit = {
					has_country_flag = yukel_faction
					federation_has_low_standing = yes
				}
				save_global_event_target_as = global_yukel_leader
			}
			random_country = {
				limit = {
					has_country_flag = yukel_faction
					federation_has_normal_standing = yes
				}
				save_global_event_target_as = global_yukel_leader
			}
			random_country = {
				limit = {
					has_country_flag = yukel_faction
					federation_has_high_standing = yes
				}
				save_global_event_target_as = global_yukel_leader
			}
			random_country = {
				limit = {
					has_country_flag = yukel_faction
					federation_has_very_high_standing = yes
				}
				save_global_event_target_as = global_yukel_leader
			}
			random_country = {
				limit = {
					has_country_flag = yukel_faction
					is_lake_federation_leader = yes
				}
				save_global_event_target_as = global_yukel_leader
			}
			event_target:global_yukel_leader = { set_country_flag = yukel_leader }
		}
	}
}

federation_increase_cohesion = {
	if = {
		limit = { 
			has_global_flag = lake_cohesion_5
			ai = no
		}
		custom_tooltip = lake_federation_cohesion_up_5
		add_adm_power = 50
		add_dip_power = 50
		add_mil_power = 50
	}
	else = { custom_tooltip = lake_federation_cohesion_up }
	if = {
		limit = { is_lake_federation_leader = yes }
		hidden_effect = {
			if = {
				limit = { has_global_flag = lake_cohesion_5 }
				every_country = {
					limit = { 
						has_country_modifier = lake_federation_member
						ai = no
					}
					add_adm_power = 50
					add_dip_power = 50
					add_mil_power = 50
				}
			}
			else_if = {
				limit = { has_global_flag = lake_cohesion_4 }
				set_global_flag = lake_cohesion_5
				clr_global_flag = lake_cohesion_4
				every_country = {
					limit = { has_country_modifier = lake_federation_member }
					add_country_modifier = { 
						name = lake_federation_5_cohesion
						duration = -1
						hidden = yes
					}
				}
			}
			else_if = {
				limit = { has_global_flag = lake_cohesion_3 }
				set_global_flag = lake_cohesion_4
				clr_global_flag = lake_cohesion_3
			}
			else_if = {
				limit = { has_global_flag = lake_cohesion_2 }
				set_global_flag = lake_cohesion_3
				clr_global_flag = lake_cohesion_2
			}
			else_if = {
				limit = { has_global_flag = lake_cohesion_1 }
				set_global_flag = lake_cohesion_2
				clr_global_flag = lake_cohesion_1
			}
		}
	}
}

federation_increase_cohesion_all = { #works for not-president
	if = {
		limit = { 
			has_global_flag = lake_cohesion_5
			ai = no
		}
		custom_tooltip = lake_federation_cohesion_up_5
		add_adm_power = 50
		add_dip_power = 50
		add_mil_power = 50
	}
	else = { custom_tooltip = lake_federation_cohesion_up }
	if = {
		limit = { has_country_modifier = lake_federation_member }
		hidden_effect = {
			if = {
				limit = { has_global_flag = lake_cohesion_5 }
				every_country = {
					limit = { 
						has_country_modifier = lake_federation_member
						ai = no
					}
					add_adm_power = 50
					add_dip_power = 50
					add_mil_power = 50
				}
			}
			else_if = {
				limit = { has_global_flag = lake_cohesion_4 }
				set_global_flag = lake_cohesion_5
				clr_global_flag = lake_cohesion_4
				every_country = {
					limit = { has_country_modifier = lake_federation_member }
					add_country_modifier = { 
						name = lake_federation_5_cohesion
						duration = -1
						hidden = yes
					}
				}
			}
			else_if = {
				limit = { has_global_flag = lake_cohesion_3 }
				set_global_flag = lake_cohesion_4
				clr_global_flag = lake_cohesion_3
			}
			else_if = {
				limit = { has_global_flag = lake_cohesion_2 }
				set_global_flag = lake_cohesion_3
				clr_global_flag = lake_cohesion_2
			}
			else_if = {
				limit = { has_global_flag = lake_cohesion_1 }
				set_global_flag = lake_cohesion_2
				clr_global_flag = lake_cohesion_1
			}
		}
	}
}

federation_decrease_cohesion = {
	custom_tooltip = lake_federation_cohesion_down
	if = {
		limit = { is_lake_federation_leader = yes }
		hidden_effect = {
			if = {
				limit = { has_global_flag = lake_cohesion_5 }
				set_global_flag = lake_cohesion_4
				clr_global_flag = lake_cohesion_5
				every_country = {
					limit = { has_country_modifier = lake_federation_5_cohesion }
					remove_country_modifier = lake_federation_5_cohesion
				}
			}
			else_if = {
				limit = { has_global_flag = lake_cohesion_4 }
				set_global_flag = lake_cohesion_3
				clr_global_flag = lake_cohesion_4
			}
			else_if = {
				limit = { has_global_flag = lake_cohesion_3 }
				set_global_flag = lake_cohesion_2
				clr_global_flag = lake_cohesion_3
			}
			else_if = {
				limit = { has_global_flag = lake_cohesion_2 }
				set_global_flag = lake_cohesion_1
				clr_global_flag = lake_cohesion_2
			}
			else_if = {
				limit = { has_global_flag = lake_cohesion_1 }
				clr_global_flag = lake_cohesion_1
				every_country = {
					limit = { has_country_modifier = lake_federation_member }
					country_event = { id = lake.39 }
					remove_country_modifier = lake_federation_member
				}
				set_global_flag = lake_federation_disbanded
			}
		}
	}
}

federation_decrease_cohesion_all = { #works for not-president
	custom_tooltip = lake_federation_cohesion_down
	hidden_effect = {
		if = {
			limit = { has_global_flag = lake_cohesion_5 }
			set_global_flag = lake_cohesion_4
			clr_global_flag = lake_cohesion_5
			every_country = {
				limit = { has_country_modifier = lake_federation_5_cohesion }
				remove_country_modifier = lake_federation_5_cohesion
			}
		}
		else_if = {
			limit = { has_global_flag = lake_cohesion_4 }
			set_global_flag = lake_cohesion_3
			clr_global_flag = lake_cohesion_4
		}
		else_if = {
			limit = { has_global_flag = lake_cohesion_3 }
			set_global_flag = lake_cohesion_2
			clr_global_flag = lake_cohesion_3
		}
		else_if = {
			limit = { has_global_flag = lake_cohesion_2 }
			set_global_flag = lake_cohesion_1
			set_global_flag = lake_cohesion_15 #needed to prevent if issue
			clr_global_flag = lake_cohesion_2
			#country_event = { id = splintering.1 }
		}
		if = { #needed separate from elseif chain because of event firing
			limit = {
				NOT = {
					has_global_flag = lake_cohesion_5
					has_global_flag = lake_cohesion_4
					has_global_flag = lake_cohesion_3
					has_global_flag = lake_cohesion_2
					has_global_flag = lake_cohesion_15
				}
				has_global_flag = lake_cohesion_1
			}
			clr_global_flag = lake_cohesion_1
			every_country = {
				limit = { has_country_modifier = lake_federation_member }
				country_event = { id = lake.39 }
				#remove_country_modifier = lake_federation_member
			}
			set_global_flag = lake_federation_disbanded
		}
		else_if = {
			limit = {
				NOT = {
					has_global_flag = lake_cohesion_5
					has_global_flag = lake_cohesion_4
					has_global_flag = lake_cohesion_3
					has_global_flag = lake_cohesion_2
					has_global_flag = lake_cohesion_15
					has_global_flag = lake_cohesion_1
				}
			}
			every_country = {
				limit = { culture_group = triunic }
				swap_non_generic_missions = yes
				clear_federation_global_flag = yes
			}
			set_global_flag = lake_federation_disbanded
		}
		if = {
			limit = { has_global_flag = lake_dead }
			every_country = {
				limit = { has_country_modifier = lake_federation_member }
				country_event = { id = lake.3900 days = 30 }
			}
		}
		clr_global_flag = lake_cohesion_15 #needed to prevent if issue
	}
}

federation_reset_cohesion = {
	clr_global_flag = lake_cohesion_5
	clr_global_flag = lake_cohesion_4
	set_global_flag = lake_cohesion_3
	clr_global_flag = lake_cohesion_2
	clr_global_flag = lake_cohesion_1
}

federation_1_cohesion = {
	clr_global_flag = lake_cohesion_5
	clr_global_flag = lake_cohesion_4
	clr_global_flag = lake_cohesion_3
	clr_global_flag = lake_cohesion_2
	set_global_flag = lake_cohesion_1
}

federation_cohesion_form_formable = {
	custom_tooltip = federation_cohesion_forming
	if = {
		limit = { federation_cohesion_forms_J51 = yes }
		change_tag = J51
		hidden_effect = { restore_country_name = yes }
		set_country_flag = cohesion_J51_former 
	}
	else_if = {
		limit = { federation_cohesion_forms_J52 = yes }
		change_tag = J52
		if = {
			limit = { religion = enuuk_followers }
			custom_tooltip = J52_stay_enuuk_tt
		}
		else = { change_religion = enuuk_followers }
		if = {
			limit = { NOT = { government = republic } }
			change_government = republic
		}
		hidden_effect = { restore_country_name = yes }
		set_country_flag = cohesion_J52_former 
	}
	else_if = {
		limit = { federation_cohesion_forms_J53 = yes }
		change_tag = J53
		hidden_effect = { restore_country_name = yes }
		set_country_flag = cohesion_J53_former 
	}
	else_if = {
		limit = { federation_cohesion_forms_J49 = yes }
		change_tag = J49
		hidden_effect = { restore_country_name = yes }
		set_country_flag = cohesion_J49_former 
	}
	else_if = {
		limit = { federation_cohesion_forms_J50 = yes }
		change_tag = J50
		hidden_effect = { restore_country_name = yes }
		set_country_flag = cohesion_J50_former 
	}
	if = {
		limit = {
			NOT = { government_rank = 2 }
		}
		set_government_rank = 2
	}
	country_event = { id = ideagroups.1 } #Swap Ideas
	set_country_flag = cohesion_rejected_formation
	add_country_modifier = { 
		name = lake_federation_splintering
		duration = 5475
	}
	swap_non_generic_missions = yes
}

federation_cohesion_revert_tag = {
	release_all_possible_countries = yes
	trigger_switch = {
		on_trigger = was_tag
		J34 = { change_tag = J34 } #First in off chance it's united Qarshtuulu
		J01 = { change_tag = J01 }
		J02 = { change_tag = J02 }
		J03 = { change_tag = J03 }
		J04 = { change_tag = J04 }
		J05 = { change_tag = J05 }
		J06 = { change_tag = J06 }
		J07 = { change_tag = J07 }
		J08 = { change_tag = J08 }
		J09 = { change_tag = J09 }
		J10 = { change_tag = J10 }
		J11 = { change_tag = J11 }
		J12 = { change_tag = J12 }
		J13 = { change_tag = J13 }
		J14 = { change_tag = J14 }
		J15 = { change_tag = J15 }
		J16 = { change_tag = J16 }
		J17 = { change_tag = J17 }
		J18 = { change_tag = J18 }
		J19 = { change_tag = J19 }
		J20 = { change_tag = J20 }
		J21 = { change_tag = J21 }
		J22 = { change_tag = J22 }
		J23 = { change_tag = J23 }
		J24 = { change_tag = J24 }
		J25 = { change_tag = J25 }
		J26 = { change_tag = J26 }
		J27 = { change_tag = J27 }
		J28 = { change_tag = J28 }
		J29 = { change_tag = J29 }
		J30 = { change_tag = J30 }
		J31 = { change_tag = J31 }
	}
	swap_free_idea_group = yes
	swap_non_generic_missions = yes
}

federation_magew_setup_normal = {
	#Normal Mage War Leader
	random_country = {
		limit = {
			has_country_flag = LF_mages_normal
		}
		save_global_event_target_as = LFnormalmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_normal
			federation_has_low_standing = yes
		}
		save_global_event_target_as = LFnormalmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_normal
			federation_has_normal_standing = yes
		}
		save_global_event_target_as = LFnormalmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_normal
			federation_has_high_standing = yes
		}
		save_global_event_target_as = LFnormalmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_normal
			federation_has_very_high_standing = yes
		}
		save_global_event_target_as = LFnormalmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_normal
			is_lake_federation_leader = yes
		}
		save_global_event_target_as = LFnormalmageWarleader
	}
	if = {
		limit = {
			has_saved_global_event_target = LFnormalmageWarleader
		}
		event_target:LFnormalmageWarleader = {
			set_country_flag = LFnormalmageWarleader
		}
	}
}

federation_magew_setup_onyxguard = {
	#Onyxguard Mage War Leader
	random_country = {
		limit = {
			has_country_flag = LF_mages_onyxguard
		}
		save_global_event_target_as = LFonyxguardmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_onyxguard
			federation_has_low_standing = yes
		}
		save_global_event_target_as = LFonyxguardmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_onyxguard
			federation_has_normal_standing = yes
		}
		save_global_event_target_as = LFonyxguardmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_onyxguard
			federation_has_high_standing = yes
		}
		save_global_event_target_as = LFonyxguardmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_onyxguard
			federation_has_very_high_standing = yes
		}
		save_global_event_target_as = LFonyxguardmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_onyxguard
			is_lake_federation_leader = yes
		}
		save_global_event_target_as = LFonyxguardmageWarleader
	}
	if = {
		limit = {
			has_saved_global_event_target = LFonyxguardmageWarleader
		}
		event_target:LFonyxguardmageWarleader = {
			set_country_flag = LFonyxguardmageWarleader
		}
	}
}

federation_magew_setup_banned = {
	#Banned Mage War Leader
	random_country = {
		limit = {
			has_country_flag = LF_mages_banned
		}
		save_global_event_target_as = LFbannedmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_banned
			federation_has_low_standing = yes
		}
		save_global_event_target_as = LFbannedmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_banned
			federation_has_normal_standing = yes
		}
		save_global_event_target_as = LFbannedmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_banned
			federation_has_high_standing = yes
		}
		save_global_event_target_as = LFbannedmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_banned
			federation_has_very_high_standing = yes
		}
		save_global_event_target_as = LFbannedmageWarleader
	}
	random_country = {
		limit = {
			has_country_flag = LF_mages_banned
			is_lake_federation_leader = yes
		}
		save_global_event_target_as = LFbannedmageWarleader
	}
	if = {
		limit = {
			has_saved_global_event_target = LFbannedmageWarleader
		}
		event_target:LFbannedmageWarleader = {
			set_country_flag = LFbannedmageWarleader
		}
	}
}

federation_magew_none_setup = {
	if = {
		limit = {
			5230 = {
				NOT = {
					check_variable = {
						which = LF_mage_crisis_number_high
						which = LF_mage_crisis_number_mid
					}
					check_variable = {
						which = LF_mage_crisis_number_high
						which = LF_mage_crisis_number_low
					}
				}
			}
		}
		set_global_flag = LF_mage_crisis_lowest_high
		every_country = {
			limit = {
				has_country_modifier = lake_federation_member
			}
			federation_magew_setup_onyxguard = yes
			federation_magew_setup_banned = yes
		}
	}
	if = {
		limit = {
			5230 = {
				NOT = {
					check_variable = {
						which = LF_mage_crisis_number_mid
						which = LF_mage_crisis_number_high
					}
					check_variable = {
						which = LF_mage_crisis_number_mid
						which = LF_mage_crisis_number_low
					}
				}
			}
		}
		set_global_flag = LF_mage_crisis_lowest_mid
		every_country = {
			limit = {
				has_country_modifier = lake_federation_member
			}
			federation_magew_setup_normal = yes
			federation_magew_setup_banned = yes
		}
	}
	if = {
		limit = {
			5230 = {
				NOT = {
					check_variable = {
						which = LF_mage_crisis_number_low
						which = LF_mage_crisis_number_high
					}
					check_variable = {
						which = LF_mage_crisis_number_low
						which = LF_mage_crisis_number_mid
					}
				}
			}
		}
		set_global_flag = LF_mage_crisis_lowest_low
		every_country = {
			limit = {
				has_country_modifier = lake_federation_member
			}
			federation_magew_setup_normal = yes
			federation_magew_setup_onyxguard = yes
		}
	}
	country_event = {
		id = fed_magew.10
		days = 15
	}
}

federation_magew_clear_flags = {
	clr_global_flag = LF_leader_mages_normal
	clr_global_flag = LF_leader_mages_onyxguard
	clr_global_flag = LF_leader_mages_banned
	clr_global_flag = LF_mage_crisis_high
	clr_global_flag = LF_mage_crisis_mid
	clr_global_flag = LF_mage_crisis_low
	clr_global_flag = LF_mage_crisis_none
	clr_global_flag = LF_mage_crisis_lowest_high
	clr_global_flag = LF_mage_crisis_lowest_mid
	clr_global_flag = LF_mage_crisis_lowest_low
	clr_global_flag = federation_crisis_magew
	clr_global_flag = federation_magew_setupflag
	every_country = {
		limit = {
			has_country_modifier = lake_federation_member
		}
		clr_country_flag = LFnormalmageWarleader
		clr_country_flag = LFonyxguardmageWarleader
		clr_country_flag = LFbannedmageWarleader
	}
	if = {
		limit = {
			has_saved_global_event_target = LFnormalmageWarleader
		}
		clear_global_event_target = LFnormalmageWarleader
	}
	if = {
		limit = {
			has_saved_global_event_target = LFonyxguardmageWarleader
		}
		clear_global_event_target = LFonyxguardmageWarleader
	}
	if = {
		limit = {
			has_saved_global_event_target = LFbannedmageWarleader
		}
		clear_global_event_target = LFbannedmageWarleader
	}
}

##############################################
### Sedentarization system related effects ###
sedentarization_on_yearly_pulse = {
	if = {
		limit = {
			check_variable = {
				which = sed_outpost_cap
				value = 1
			}
		}
		# Recalculate outpost cap, but don't do anything if outpost usage is somehow above cap
		sedentarization_calculate_outpost_cap = yes
		# Force AI to use the system
		if = {
			limit = {
				ai = yes
				# Should never be true for centaurs
				sedentarization_country_can_place_outpost = yes
			}
			# Now check if they actually have a Forbidden province 
			random_owned_province = {
				limit = {
					sedentarization_province_can_recieve_outpost = { owner_scope = ROOT }
				}
				# Prioritize which province to place an outpost. Criteria at the top have lowest priority (least desirable).
				# Default option is the originally-picked random province.
				save_event_target_as = sed_ai_new_outpost_province
				random_area_province = {
					limit = {
						OR = {
							has_terrain = farmlands
							has_terrain = grasslands
							has_terrain = drylands
						}
					}
					save_event_target_as = sed_ai_new_outpost_province
				}
				random_area_province = {
					limit = {
						OR = {
							province_has_center_of_trade_of_level = 1
							has_river_estuary_trigger = yes
						}
					}
					save_event_target_as = sed_ai_new_outpost_province
				}
				event_target:sed_ai_new_outpost_province = { sedentarization_place_brand_new_outpost = yes }
			}
		}
		# Check if outposts are even being used before scoping to every owned province
		if = {
			limit = {
				check_variable = {
					which = sed_outpost_cap_usage
					value = 1
				}
			}
			# Yearly maintenance, check for valid phase progression, and fire random events
			every_owned_province = {
				limit = { sedentarization_province_has_outpost = yes }
				# Update the min autonomy-negating modifier
				sedentarization_apply_min_autonomy_negating_modifier = yes
				# Check for invalid Outpost flags, likely due to starting a purge/expulsion
				sedentarization_check_for_invalid_flags = yes
				# Highest level gate for Phase progression: is it not blocked?
				if = {
					limit = {
						NOT = { has_province_modifier = sed_outpost_progress_blocked }
					}
					# Check autonomy thresholds to progress phases
					province_event = {
						id = sedentarization.19
						days = 1
						random = 334	# One month less than full year to give player time to respond if playing unpaused e.g. in MP
					}
				}
				if = {	# Capital Outposts without First Contact are a special case
					limit = {
						is_capital = yes
						NOT = { has_province_flag = sed_contact_complete }
					}
					province_event = { id = sedentarization.100 }
				}
				sedentarization_pick_yearly_event = yes
			}
		}
	}
}

sedentarization_calculate_outpost_cap = {
	export_to_variable = {
		which = sed_outpost_cap
		value = trigger_value:government_rank
	}
	export_to_variable = {
		which = sed_num_of_colonists
		value = trigger_value:num_of_colonists
	}
	change_variable = {
		which = sed_outpost_cap
		which = sed_num_of_colonists
	}
}

sedentarization_deduct_outpost_cost_from_country = {
	add_treasury = -50
	hidden_effect = {
		change_variable = {
			which = sed_outpost_cap_usage
			value = 1
		}
	}
}

sedentarization_place_brand_new_outpost = {
	# Apply a min autonomy-negating modifier if necessary (for territories and half-states)
	sedentarization_apply_min_autonomy_negating_modifier = yes
	# Apply the outpost at the correct phase. It should be Phase One most of the time.
	if = {
		limit = {
			NOT = {
				has_province_flag = sed_incomplete_sedentarization
				has_province_flag = sed_semi_complete_sedentarization
			}
		}
		custom_tooltip = sed_place_brand_new_outpost_phase_one
		sedentarization_reset_province_outpost = { reset_to = phase_one }
		owner = { sedentarization_deduct_outpost_cost_from_country = yes }
	}
	if = {	# Can't use else_if because firing an event
		limit = {
			OR = {
				has_province_flag = sed_incomplete_sedentarization
				has_province_flag = sed_semi_complete_sedentarization
			}
		}
		custom_tooltip = sed_place_brand_new_outpost_phase_two
		hidden_effect = {
			owner = { set_country_flag = sed_placing_new_phase_two_outpost }
			province_event = { id = sedentarization.200 }
		}
		# Cleanup invalid Phase One flags; Phase Two and Three flags shouldn't exist because of our 'on_province_owner_change' effect.
		sedentarization_check_for_invalid_flags = yes
	}
}

sedentarization_apply_min_autonomy_negating_modifier = {
	# Apply a modifier to negate the min autonomy from territories and half-states
	hidden_effect = {
		owner = { save_event_target_as = sed_outpost_owner }
		area = {
			limit = { owned_by = event_target:sed_outpost_owner }
			if = {
				limit = { is_territory = yes }
				add_province_modifier = {
					name = sed_min_autonomy_from_territory_negation
					duration = -1
					hidden = yes
				}
				remove_province_modifier = sed_min_autonomy_from_half_state_negation
			}
			else_if = {
				limit = {
					is_state = yes
					NOT = { is_state_core = event_target:sed_outpost_owner }
				}
				add_province_modifier = {
					name = sed_min_autonomy_from_half_state_negation
					duration = -1
					hidden = yes
				}
				remove_province_modifier = sed_min_autonomy_from_territory_negation
			}
			else = {
				remove_province_modifier = sed_min_autonomy_from_territory_negation
				remove_province_modifier = sed_min_autonomy_from_half_state_negation
			}

			if = { #Ikogshaantus
				limit = { has_province_modifier = J52_consecrated_industry }
				add_province_modifier = {
					name = sed_min_autonomy_from_ikog_consecration_negation
					duration = -1
					hidden = yes
				}
			}
			else = { remove_province_modifier = sed_min_autonomy_from_ikog_consecration_negation }
		}
	}
}

# Use this to:
#  - start a specific outpost phase,
#  - restart a phase (but not reset intra-phase flags; use "sedentarization_clear_phase_[one/two/three]_flags" for that),
#  - clear outpost modifiers (but not to remove the system; use "sedentarization_remove_system_from_province" for that).
# NOTE: this effect doesn't produce a tooltip. If it's ever necessary to tell
# the player an outpost is being reset, use custom tooltips as apprpriate.
sedentarization_reset_province_outpost = {
	# Instead of using variables to directly change code, a variable places a flag which we then switch our logic on
	[[reset_to] set_province_flag = sed_reset_to_$reset_to$ ]
	hidden_effect = {
		# These first four ifs are non-exclusive:
		# the first three deal with clearing modifiers from previous phases; ...
		if = {
			limit = {
				NOT = { has_province_flag = sed_reset_to_phase_one }
			}
			sedentarization_INTERNAL_remove_outpost_modifiers = { phase = i }
		}
		if = {
			limit = {
				NOT = { has_province_flag = sed_reset_to_phase_two }
			}
			sedentarization_INTERNAL_remove_outpost_modifiers = { phase = ii }
		}
		if = {
			limit = {
				NOT = { has_province_flag = sed_reset_to_phase_three }
			}
			sedentarization_INTERNAL_remove_outpost_modifiers = { phase = iii }
		}
		# ... the fourth deals with cleanup if the Outpost is being completely removed. Then the rest of this conditional
		# chain (the three else_ifs) deals with resetting *to* a phase, i.e. placing modifiers and adjusting autonomy.
		if = {
			limit = {
				NOT = {
					has_province_flag = sed_reset_to_phase_one
					has_province_flag = sed_reset_to_phase_two
					has_province_flag = sed_reset_to_phase_three
				}
			}
			if = {
				limit = { has_province_flag = sed_reset_to_completion }
				area = {
					# This immediately blocks the ability to place new outposts in the area; necessary since
					# other ways to detect a completed province won't get placed in the area for three months.
					add_province_modifier = {
						name = sed_system_completed
						duration = -1
						hidden = yes
					}
					# Ensure "real" (hidden) autonomy doesn't cheat past the intended minimum
					if = {
						limit = {
							NOT = { local_autonomy = 50.1 }
						 }
						 set_local_autonomy = 50
					}
				}
				if = {	# This special sanity check is specifically because of outpost_completion_heavy_settlement_effect,
						# which reduces outpost_cap_usage (among other things), right before this is called.
					limit = { sedentarization_province_has_outpost = yes }
					owner = {
						subtract_variable = {
							which = sed_outpost_cap_usage
							value = 1
						}
					}
				}
			}
			# Must come after the special sanity check; will already be cleared if "...heavy_settlement_effect" was called
			clr_province_flag = sed_province_has_outpost
		}
		else_if = {
			limit = { has_province_flag = sed_reset_to_phase_one }
			if = {
				limit = {
					NOT = { has_province_modifier = sed_invalid_flag_caused_reset }
				}
				sedentarization_INTERNAL_place_outpost = {
					phase_numeral = phase_i
					reset_autonomy_plus_one = 101
				}
			}
			# If this reset was caused by the invalidation effect, leave autonomy as is so that
			# the Outpost can quickly progress back to Phase Two.
			else = {
				sedentarization_INTERNAL_place_outpost = { phase_numeral = phase_i }
			}
		}
		else_if = {
			limit = { has_province_flag = sed_reset_to_phase_two }
			if = {
				limit = {
					NOT = { has_province_modifier = sed_invalid_flag_caused_reset }
				}
				sedentarization_INTERNAL_place_outpost = {
					phase_numeral = phase_ii
					reset_autonomy_plus_one = 81
				}
			}
			# If this reset was caused by the invalidation effect, leave autonomy as is so that
			# the Outpost can quickly progress back to Phase Three.
			else = {
				sedentarization_INTERNAL_place_outpost = { phase_numeral = phase_ii }
			}
			set_province_flag = sed_trade_goods_upgrade_events_unlocked
		}
		else_if = {
			limit = { has_province_flag = sed_reset_to_phase_three }
			sedentarization_INTERNAL_place_outpost = {
				phase_numeral = phase_iii
				reset_autonomy_plus_one = 66
			}
		}
		[[reset_to] clr_province_flag = sed_reset_to_$reset_to$ ]
	}
}

# DO NOT USE unless you know you shouldn't be using "sedentarization_reset_province_outpost" instead
sedentarization_INTERNAL_remove_outpost_modifiers = {
	# If this is Phase Three progressing to completion, don't remove areal modifiers until the propagation effect happens
	if = {
		limit = {
			NOT = { has_province_flag = sed_reset_to_completion }
		}
		area = { remove_province_modifier = sed_outpost_areal_influence_phase_$phase$ }
	}
	remove_province_modifier = sed_outpost_phase_$phase$
}

# DO NOT USE unless you know you shouldn't be using "sedentarization_reset_province_outpost" instead
sedentarization_INTERNAL_place_outpost = {
	set_province_flag = sed_province_has_outpost
	add_province_modifier = {
		name = sed_outpost_$phase_numeral$
		duration = -1
	}
	owner = { save_event_target_as = sed_outpost_owner }
	area = {
		limit = { owned_by = event_target:sed_outpost_owner }
		add_province_modifier = {
			name = sed_outpost_areal_influence_$phase_numeral$
			duration = -1
		}
		[[reset_autonomy_plus_one]
			if = {
				limit = {
					OR = {
						# Check for "< min_autonomy+1" because "< min_autonomy" fails to catch provinces at minimum autonomy that
						# have their "real" (hidden) autonomy below minimum.
						NOT = { local_autonomy = $reset_autonomy_plus_one$ }
						sedentarization_province_has_outpost = yes	# Whatever the Outpost's autonomy, ensure it's correct for the new phase
					}
				}
				set_local_autonomy = $reset_autonomy_plus_one$
				# Subtract one to get the actual threshold autonomy but not if it's Phase One (since trying to set autonomy to 101%
				# leaves it at 100% due to a hardcoded upper limit; don't subtract to 99%).
				if = {
					limit = {
						NOT = { local_autonomy = 100 }
					}
					add_local_autonomy = -1
				}
			}
		]
	}
	remove_province_modifier = sed_outpost_areal_influence_$phase_numeral$
}

sedentarization_check_for_invalid_flags = {
	hidden_effect = {
		if = {
			limit = {
				has_province_flag = sed_contact_complete
				sedentarization_province_valid_for_centaur_friendly_options = no
			}
			# Phase One flags
			sedentarization_unlock_raid_events = yes
			# Phase Two and Three get completely reset if invalid. The earliest invalid phase will have its progress reset;
			# i.e. a Phase Three Outpost with an invalid Phase Two flag will have to start Phase Two all over.
			# Phase Two flags
			if = {
				limit = { has_province_flag = sed_outpost_type_gozabhar }
				clr_province_flag = sed_outpost_type_selected
				clr_province_flag = sed_outpost_type_gozabhar
				clr_province_flag = sed_trade_goods_upgrade_events_unlocked
				add_province_modifier = {
					name = sed_invalid_flag_caused_reset
					duration = -1
					hidden = yes
				}
				# Reset to the end (autonomy-wise) of the phase preceding the earliest invalidated phase. The yearly pulse will see this
				# outpost is valid to progress and refire the selection event for the earliest invalidated phase.
				sedentarization_reset_province_outpost = { reset_to = phase_one }
			}
			# Phase Three flags
			if = {
				limit = { has_province_flag = sed_settler_policy_centaur_tribute }
				clr_province_flag = sed_settler_policy_selected
				clr_province_flag = sed_settler_policy_centaur_tribute
				add_province_modifier = {
					name = sed_invalid_flag_caused_reset
					duration = -1
					hidden = yes
				}
				if = {	# AKA, if it hasn't already been reset then reset to the end of Phase Two
					limit = { has_province_modifier = sed_outpost_phase_iii }
					sedentarization_reset_province_outpost = { reset_to = phase_two }
				}
			}
		}
	}
}

sedentarization_unlock_raid_events = {
	clr_province_flag = sed_friendly_warning
	custom_tooltip = sed_unlock_raid_events
	set_province_flag = sed_raid_events_unlocked
}

sedentarization_set_contact_complete = {
	set_province_flag = sed_contact_complete
	hidden_effect = {
		if = {
			limit = { has_province_modifier = sed_no_first_contact }
			remove_province_modifier = sed_no_first_contact
			remove_province_modifier = sed_outpost_progress_blocked
		}
	}
}

sedentarization_pick_yearly_event = {
	random_list = {
		# 69.3% chance per outpost no event happens each year
		693 = {}
		# ~60% chance at least one event happens within 2.5 years
		307 = {
			modifier = {	# ~80% chance of First Contact happening within 2.5 years
				factor = 2
				NOT = { has_province_flag = sed_contact_complete }
			}
			modifier = {	# Hurry First Contact if on track to reach min autonomy within a year
				factor = 6
				NOT = {
					has_province_flag = sed_contact_complete
					local_autonomy = 82.4
				}
			}
			modifier = {
				factor = 2
				has_country_flag = J52_more_sedentarization_flag #Ikogshaantus
			}
			# Outpost owner is used for some triggers (currently just Phase Two)
			owner = { save_event_target_as = sed_outpost_owner }
			random_list = {
				# Twice as likely for Phase One events...
				2 = {
					trigger = { sedentarization_phase_one_events_can_fire = yes }
					# Phase One event handler
					province_event = {
						id = sedentarization.1
						days = 1
						random = 359
					}
				}
				# ...as Phase Two events
				1 = {
					trigger = { sedentarization_phase_two_events_can_fire = yes }
					province_event = {
						id = sedentarization.2
						days = 1
						random = 359
					}
				}
			}
		}
	}
}

sedentarization_on_province_owner_change = {
	if = {
		limit = { has_province_modifier = sed_forbidden }
		# Add the mitigating modifier for centaurs.
		if = {
			limit = {
				owner = { culture_is_centaur = yes }
			}
			add_province_modifier = {
				name = sed_entrenched_centaur_nomadism
				duration = -1
			}
		}
		# Housekeeping for province flags and modifiers and country variables
		owner = { save_event_target_as = sed_outpost_owner }
		if = {
			limit = { sedentarization_province_has_outpost = yes }
			# Maintain correct outpost_cap_usage for the loser
			FROM = {
				subtract_variable = {
					which = sed_outpost_cap_usage
					value = 1
				}
			}
			# If Phase One, clear Phase One flags; don't clear these in future Phases
			if = {
				limit = {
					NOT = {
						has_province_flag = sed_incomplete_sedentarization
						has_province_flag = sed_semi_complete_sedentarization
					}
				}
				sedentarization_clear_phase_one_flags = yes
			}
			else = {
				sedentarization_clear_phase_two_flags = yes
				sedentarization_clear_phase_three_flags = yes
			}
			sedentarization_reset_province_outpost = yes
		}
		else_if = {
			limit = {
				area_for_scope_province = { sedentarization_province_has_outpost = yes }
				area_for_scope_province = {
					type = all
					owned_by = event_target:sed_outpost_owner
				}
			}
			random_area_province = {
				limit = { sedentarization_province_has_outpost = yes }
				remove_province_modifier = sed_dont_own_whole_area
				remove_province_modifier = sed_outpost_progress_blocked
			}
		}
		# This is where a country's outpost cap is initiated. It's later updated in on_yearly_pulse
		owner = {
			if = {
				limit = {
					culture_is_centaur = no
					NOT = {
						check_variable = {
							which = sed_outpost_cap
							value = 1
						}
					}
				}
				sedentarization_calculate_outpost_cap = yes
				PREV = { save_event_target_as = sed_first_forbidden_province }
				country_event = { id = sedentarization.10 }
			}
		}
	}
}

sedentarization_clear_phase_one_flags = {
	clr_province_flag = sed_contact_complete
	clr_province_flag = sed_friendly_warning
	clr_province_flag = sed_raid_events_unlocked
	clr_province_flag = sed_local_mounted_guards
}

sedentarization_clear_phase_two_flags = {
	clr_province_flag = sed_outpost_type_gozabhar
	clr_province_flag = sed_outpost_type_settlement
	clr_province_flag = sed_outpost_type_nomadic_base
	clr_province_flag = sed_outpost_type_kelaktar
	clr_province_flag = sed_outpost_type_selected
	clr_province_flag = sed_trade_goods_upgrade_events_unlocked
}

sedentarization_clear_phase_three_flags = {
	clr_province_flag = sed_settler_policy_centaur_tribute
	clr_province_flag = sed_settler_policy_nomadic_control
	clr_province_flag = sed_settler_policy_heavy_settlement
}

sedentarization_on_capital_moved = {
	# Immediately fire the random-time-based reqs for phase progress (currently only First Contact in Phase One)
	if = {
		limit = {
			has_province_modifier = sed_forbidden
			sedentarization_province_has_outpost = yes
			NOT = { has_province_flag = sed_contact_complete }
		}
		# This needs to be queued (via the flag) since it's possible another outpost is currently presenting this event;
		# it's intended First Contact happens ASAP upon moving capital to an outpost.
		set_province_flag = sed_sudden_raid_from_moving_capital
		province_event = { id = sedentarization.100 }
	}
}

sedentarization_outpost_try_phase_change = {
	# We corrected min autonomy and checked for invalid flags in the yearly pulse, but
	# let's check once more cause it's now up to almost a year later.
	sedentarization_apply_min_autonomy_negating_modifier = yes
	sedentarization_check_for_invalid_flags = yes
	owner = { save_event_target_as = sed_outpost_owner }
	if = {
		limit = {
			area_for_scope_province = {
				type = all
				OR = {
					owned_by = event_target:sed_outpost_owner
					NOT = { has_province_modifier = sed_forbidden }
				}
			}
		}
		# Phase One, progressing to Phase Two. Phase One is the only phase with an RNG event requirement; check if it has happened.
		[[current_phase_is_one]
			if = {
				limit = { has_province_flag = sed_contact_complete }
				# Phase One, progressing to Phase Two
				province_event = { id = sedentarization.200 }
			}
			# If ineligible to progress, don't check again until the issue has been resolved
			else = {
				add_province_modifier = {
					name = sed_no_first_contact
					duration = -1
					hidden = yes
				}
				add_province_modifier = {
					name = sed_outpost_progress_blocked
					duration = -1
					hidden = yes
				}
			}
		]
		# Phase Two, progressing to Phase Three
		[[current_phase_is_two]
			province_event = { id = sedentarization.300 }
		]
		# Phase Three, progressing to completion
		[[current_phase_is_three]
			province_event = { id = sedentarization.310 }
		]
	}
	else = {
		# This modifier is just for a custom loc trigger, because triggers can't set event targets (the owner)
		# needed to check areal ownership. It's a modifier instead of a flag so I don't have to do manual cleanup.
		add_province_modifier = {
			name = sed_dont_own_whole_area
			duration = -1
			hidden = yes
		}
		add_province_modifier = {
			name = sed_outpost_progress_blocked
			duration = -1
			hidden = yes
		}
	}
}

sedentarization_reset_completion_flag = {
	clr_province_flag = sed_incomplete_sedentarization
	clr_province_flag = sed_semi_complete_sedentarization
	clr_province_flag = sed_complete_sedentarization
	[[completeness] set_province_flag = sed_$completeness$_sedentarization ]
}

sedentarization_neglecting_friendly_warning_effect = {
	if = {
		limit = { has_province_flag = sed_friendly_warning }
		custom_tooltip = sed_neglecting_friendly_warning
		sedentarization_unlock_raid_events = yes
	}
}

sedentarization_phase_two_settlement_culture_effect = {
	# Change the culture of the outpost based on owner culture; base case is owner's primary culture.
	if = {
		limit = {
			owner = { culture_group = triunic }
		}
		change_culture = urmanki
		change_religion = owner
	}
	else_if = {
		limit = {
			owner = {
				primary_culture = sun_elf
				any_owned_province = { culture = zanite }
			}
		}
		owner = {
			random_owned_province = {
				limit = { culture = zanite }
				save_event_target_as = sed_religion_source
			}
		}
		change_culture = zanite
		change_religion = event_target:sed_religion_source
	}
	else_if = {
		limit = {
			owner = {
				primary_culture = desert_elf
				any_owned_province = { culture = surani }
			}
		}
		owner = {
			random_owned_province = {
				limit = { culture = surani }
				save_event_target_as = sed_religion_source
			}
		}
		change_culture = surani
		change_religion = event_target:sed_religion_source
	}
	else_if = {
		limit = {
			owner = {
				OR = {
					primary_culture = rustroad_goblin
					primary_culture = crawler_goblin
					primary_culture = cave_goblin
					# Maghargma can colonize with goblins if this mission's completed.
					# Will be lost if they form another country or otherwise lose access to this mission (even if completed).
					mission_completed = maghargma_the_little_brothers
				}
			}
		}
		change_culture = crawler_goblin
		change_religion = owner
	}
	else = {
		change_culture = owner
		change_religion = owner
	}
}

sedentarization_phase_two_nomadic_base_culture_effect = {
	# Change the culture of the outpost based on owner culture; no base case - effect must be valid.
	if = {
		limit = {
			owner = { culture_group = triunic }
		}
		change_culture = orachav
		change_religion = owner
	}
	# TODO: culture not implemented yet; uncomment when implemented
	# else_if = {
	# 	limit = {
	# 		OR = {
	# 			primary_culture = fathide_ogre
	# 			primary_culture = wild_ogre
	# 		}
	# 	}
	# 	PREV = { change_culture = wild_ogre }
	# }
	else_if = {
		limit = {
			owner = {
				OR = {
					primary_culture = sun_elf
					primary_culture = desert_elf
					culture_group = bulwari
				}
				any_owned_province = { culture = masnsih }
			}
		}
		owner = {
			random_owned_province = {
				limit = { culture = masnsih }
				save_event_target_as = sed_religion_source
			}
		}
		change_culture = masnsih
		change_religion = event_target:sed_religion_source
	}
	else_if = {
		limit = {
			owner = { primary_culture = plateau_runsukhi }	# AKA "Rukunai"
		}
		change_culture = runsukhi
		change_religion = owner
	}
}

sedentarization_outpost_completion_generic_propagation = {
	area = {
		limit = {
			NOT = { province_id = ROOT }
			has_province_modifier = sed_forbidden
		}
		sedentarization_outpost_completion_$completion_effect$ = { culture_source = event_target:sed_outpost }
		remove_province_modifier = sed_outpost_areal_influence_phase_iii
		remove_province_modifier = sed_min_autonomy_from_territory_negation
		remove_province_modifier = sed_min_autonomy_from_half_state_negation
		remove_province_modifier = sed_min_autonomy_from_ikog_consecration_negation
	}
}

sedentarization_outpost_completion_centaur_tribute_effect = {
	add_province_modifier = {
		name = sed_centaur_tributary_system
		duration = -1
	}
	if = {
		limit = { has_province_flag = sed_outpost_type_gozabhar }
		add_base_tax = 1
		owner = { large_increase_of_centaur_tolerance_effect = yes }
	}
	else = {
		[[culture_source]
			custom_tooltip = sed_add_minority_from_outpost
			hidden_effect = {
				add_matching_race_minority_size_from_scope = { scope = $culture_source$ }
			}
		]
	}
	sedentarization_reset_completion_flag = { completeness = incomplete }
}

sedentarization_outpost_completion_nomadic_control_effect = {
	add_province_modifier = {
		name = sed_nomadic_governance
		duration = -1
	}
	[[culture_source]
		sedentarization_convert_culture_religion_to_source = { culture_source = $culture_source$ }
	]
	sedentarization_reset_completion_flag = { completeness = semi_complete }
}

# TODO: This could be useful for stuff way beyond this system
sedentarization_convert_culture_religion_to_source = {
	custom_tooltip = sed_convert_to_that_of_outpost
	hidden_effect = {
		change_culture = $culture_source$
		change_religion = $culture_source$
	}
}

sedentarization_outpost_completion_heavy_settlement_effect = {
	sedentarization_remove_system_from_province = yes
	[[culture_source]
		sedentarization_convert_culture_religion_to_source = { culture_source = $culture_source$ }
	]
	# This flag should be the only provincial script remnant from the system
	sedentarization_reset_completion_flag = { completeness = complete }
}

sedentarization_remove_system_from_province = {
	custom_tooltip = sed_remove_system_from_province
	hidden_effect = {
		# There's a nonzero want for MT makers to be able to bypass the system, even if it's only part of an area.
		# That complicates things, particularly about outpost capacity, and if only part of an area is removed.
		if = {
			limit = { sedentarization_province_has_outpost = yes }
			sedentarization_reset_province_outpost = yes
			owner = {
				subtract_variable = {
					which = sed_outpost_cap_usage
					value = 1
				}
			}
			area = {
				remove_province_modifier = sed_min_autonomy_from_territory_negation
				remove_province_modifier = sed_min_autonomy_from_half_state_negation
				remove_province_modifier = sed_min_autonomy_from_ikog_consecration_negation
			}
		}
		remove_province_modifier = sed_forbidden
		remove_province_modifier = sed_entrenched_centaur_nomadism
		remove_province_modifier = sed_min_autonomy_from_territory_negation
		remove_province_modifier = sed_min_autonomy_from_half_state_negation
		remove_province_modifier = sed_min_autonomy_from_ikog_consecration_negation
		sedentarization_clear_phase_one_flags = yes
		sedentarization_clear_phase_two_flags = yes
		sedentarization_clear_phase_three_flags = yes
		remove_province_modifier = sed_system_completed
		remove_province_modifier = sed_centaur_tributary_system
		remove_province_modifier = sed_nomadic_governance
		sedentarization_reset_completion_flag = yes
	}
}
### End of - Sedentarization system related effects

### Triunic religion related effects

building_zeal_self_effect = {
	if = { 
		limit = { 
			any_owned_province = { 
				has_any_manufactory_construction = yes 
				NOT = { has_province_flag = triunic_building_zeal_target }
			} 
		} 
		random_owned_province = { 
			limit = { 
				has_any_manufactory_construction = yes 
				NOT = { has_province_flag = triunic_building_zeal_target }
			} 
			add_construction_progress = 1
			set_province_flag = triunic_building_zeal_target 
		}
	} 
	else = { 
		random_owned_province = { 
			limit = { 
				has_construction = building 
				NOT = { has_province_flag = triunic_building_zeal_target }
			} 
			add_construction_progress = 1
			set_province_flag = triunic_building_zeal_target
		}
	}
}

building_zeal_barracks_effect = {
	if = {
		limit = { has_country_modifier = lake_federation_member }
		random_known_country = { 
			limit = { 
				OR = { 
					religion = kodave_followers 
					AND = { 
						religion = kalyin_worshippers 
						has_harmonized_with = kodave_followers 
					} 
				} 
			}
			random_owned_province = { 
				limit = { 
					has_manpower_building_trigger = no 
				} 
				add_building_construction = { 
					building = barracks 
					cost = 0 
				} 
			}
			add_opinion = { 
				who = ROOT 
				modifier = opinion_triunic_foreign_construction 
			}
			add_favors = { 
				who = ROOT 
				amount = 10 
			}
		} 
	} 
	else_if = {
		limit = { 
			tag = J33
		}

		random_subject_country = {
			limit = {
				is_subject_of_type = democratic_sphere_of_influence_subject
			}

			random_owned_province = {
				limit = {
					has_manpower_building_trigger = no
				}
				add_building_construction = {
					building = barracks
					cost = 0
				}
			}
			add_opinion = {
				who = ROOT
				modifier = opinion_triunic_foreign_construction
			}
			add_favors = {
				who = ROOT
				amount = 10
			}
		}
	} 
	else = {
		# we are sunijalla!
		random_subject_country = {

			random_owned_province = {
				limit = {
					has_manpower_building_trigger = no
				}
				add_building_construction = {
					building = barracks
					cost = 0
				}
			}
			add_opinion = {
				who = ROOT
				modifier = opinion_triunic_foreign_construction
			}
			add_favors = {
				who = ROOT
				amount = 10
			}
		}
	}
}

building_zeal_dock_effect = {
	if = {
		limit = { 
			has_country_modifier = lake_federation_member 
		}
		random_known_country = { 
			limit = { 
				OR = { 
					religion = yukel_followers 
					AND = { 
						religion = kalyin_worshippers 
						has_harmonized_with = yukel_followers 
					} 
				} 
			}
			random_owned_province = { 
				limit = { 
					has_dock_building_trigger = no 
				} 
				add_building_construction = { 
					building = dock 
					cost = 0 
				} 
			}
			add_opinion = { 
				who = ROOT 
				modifier = opinion_triunic_foreign_construction 
			}
			add_favors = { 
				who = ROOT 
				amount = 10 
			} 
		} 
	} 
	else_if = {
		limit = { 
			tag = J33
		}

		random_subject_country = {
			limit = {
				is_subject_of_type = democratic_sphere_of_influence_subject
			}

			random_owned_province = {
				limit = {
					has_dock_building_trigger = no
				}
				add_building_construction = {
					building = dock
					cost = 0
				}
			}
			add_opinion = {
				who = ROOT
				modifier = opinion_triunic_foreign_construction
			}
			add_favors = {
				who = ROOT
				amount = 10
			}
		}
	} 
	else = {
		# we are sunijalla!
		random_subject_country = {
			random_owned_province = {
				limit = {
					has_dock_building_trigger = no
				}
				add_building_construction = {
					building = dock
					cost = 0
				}
			}
			add_opinion = {
				who = ROOT
				modifier = opinion_triunic_foreign_construction
			}
			add_favors = {
				who = ROOT
				amount = 10
			}
		}
	}
}
### End of - Triunic religion related effects