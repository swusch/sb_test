###############################
# Start racial_pop custom_ui  #
###############################
# Documentation
# To add new races add matching code for each new race to the following:
# pop_menu_main_setup (older racial code found here)
# racial_pop_race_menu_clear (and pop_menu_variables province group)
# racial_pop_on_click_generic_verb_policy
# racial_menu_tooltip_race_selector
# racial_pop_list_race_update_interface
# racial_pop_list_button_click
# racial_pop_update_racial_tolerance_ui
# racial_list_sort_prov_name_rank_asc
# racial_list_sort_prov_name_rank_dec
# racial_list_sort_prov_race_ranks_dec
# racial_list_sort_prov_race_ranks_asc
# racial_list_store_dev_ranking_effect
# racial_list_store_tolerance_vars
# racial_list_sort_by_tolerance_asc
# racial_list_sorting_algorithm
# racial_list_conversion_to_rank
# racial_list_policy_adder_races
# racial_list_store_policy_vars
# racial_list_sort_by_policy_asc
# racial_mil_effect_selector_dlc
# Almost all scripted_triggers#



# Additional policies goes in:
# racial_interface_check_policy
# racial_interface_check_focus
# racial_pop_on_click_current_race_policy_check
# Along with the UI work and additional loc required



#----# Scripted effects for pop menu #----#
pop_menu_main_setup = {
	pop_menu_calculations = yes
	set_variable = { which = centaurRanking value = 1 }
	set_variable = { which = dwarvenRanking value = 2 }
	set_variable = { which = elvenRanking value = 3 }
	set_variable = { which = gnollishRanking value = 4 }
	set_variable = { which = gnomishRanking value = 5 }
	set_variable = { which = goblinRanking value = 6 }
	set_variable = { which = half_elvenRanking value = 7 }
	set_variable = { which = half_orcishRanking value = 8 }
	set_variable = { which = halflingRanking value = 9 }
	set_variable = { which = harimariRanking value = 10 }
	set_variable = { which = harpyRanking value = 11 }
	set_variable = { which = hobgoblinRanking value = 12 }
	set_variable = { which = humanRanking value = 13 }
	set_variable = { which = koboldRanking value = 14 }
	set_variable = { which = lizardfolkRanking value = 15 }
	set_variable = { which = mechanimRanking value = 16 }
	set_variable = { which = ogreRanking value = 17 }
	set_variable = { which = orcishRanking value = 18 }
	set_variable = { which = ruinbornRanking value = 19 }
	set_variable = { which = trollRanking value = 20 }
	racial_list_store_race_development_vars = yes
	racial_list_sorting_algorithm = { sortvar = nbRaceDev descending = yes }
}

pop_menu_calculations = {
	set_variable = { which = nbcentaurMajority value = 0 }
	set_variable = { which = nbcentaurMinority value = 0 }
	set_variable = { which = nbcentaurDev value = 0 }
	set_variable = { which = nbcentaurCoredDev value = 0 }
	set_variable = { which = nbdwarvenMajority value = 0 }
	set_variable = { which = nbdwarvenMinority value = 0 }
	set_variable = { which = nbdwarvenDev value = 0 }
	set_variable = { which = nbdwarvenCoredDev value = 0 }
	set_variable = { which = nbelvenMajority value = 0 }
	set_variable = { which = nbelvenMinority value = 0 }
	set_variable = { which = nbelvenDev value = 0 }
	set_variable = { which = nbelvenCoredDev value = 0 }
	set_variable = { which = nbgnollishMajority value = 0 }
	set_variable = { which = nbgnollishMinority value = 0 }
	set_variable = { which = nbgnollishDev value = 0 }
	set_variable = { which = nbgnollishCoredDev value = 0 }
	set_variable = { which = nbgnomishMajority value = 0 }
	set_variable = { which = nbgnomishMinority value = 0 }
	set_variable = { which = nbgnomishDev value = 0 }
	set_variable = { which = nbgnomishCoredDev value = 0 }
	set_variable = { which = nbgoblinMajority value = 0 }
	set_variable = { which = nbgoblinMinority value = 0 }
	set_variable = { which = nbgoblinDev value = 0 }
	set_variable = { which = nbgoblinCoredDev value = 0 }
	set_variable = { which = nbhalf_elvenMajority value = 0 }
	set_variable = { which = nbhalf_elvenMinority value = 0 }
	set_variable = { which = nbhalf_elvenDev value = 0 }
	set_variable = { which = nbhalf_elvenCoredDev value = 0 }
	set_variable = { which = nbhalf_orcishMajority value = 0 }
	set_variable = { which = nbhalf_orcishMinority value = 0 }
	set_variable = { which = nbhalf_orcishDev value = 0 }
	set_variable = { which = nbhalf_orcishCoredDev value = 0 }
	set_variable = { which = nbhalflingMajority value = 0 }
	set_variable = { which = nbhalflingMinority value = 0 }
	set_variable = { which = nbhalflingDev value = 0 }
	set_variable = { which = nbhalflingCoredDev value = 0 }
	set_variable = { which = nbharimariMajority value = 0 }
	set_variable = { which = nbharimariMinority value = 0 }
	set_variable = { which = nbharimariDev value = 0 }
	set_variable = { which = nbharimariCoredDev value = 0 }
	set_variable = { which = nbharpyMajority value = 0 }
	set_variable = { which = nbharpyMinority value = 0 }
	set_variable = { which = nbharpyDev value = 0 }
	set_variable = { which = nbharpyCoredDev value = 0 }
	set_variable = { which = nbhobgoblinMajority value = 0 }
	set_variable = { which = nbhobgoblinMinority value = 0 }
	set_variable = { which = nbhobgoblinDev value = 0 }
	set_variable = { which = nbhobgoblinCoredDev value = 0 }
	set_variable = { which = nbhumanMajority value = 0 }
	set_variable = { which = nbhumanMinority value = 0 }
	set_variable = { which = nbhumanDev value = 0 }
	set_variable = { which = nbhumanCoredDev value = 0 }
	set_variable = { which = nbkoboldMajority value = 0 }
	set_variable = { which = nbkoboldMinority value = 0 }
	set_variable = { which = nbkoboldDev value = 0 }
	set_variable = { which = nbkoboldCoredDev value = 0 }
	set_variable = { which = nblizardfolkMajority value = 0 }
	set_variable = { which = nblizardfolkMinority value = 0 }
	set_variable = { which = nblizardfolkDev value = 0 }
	set_variable = { which = nblizardfolkCoredDev value = 0 }
	set_variable = { which = nbmechanimMajority value = 0 }
	set_variable = { which = nbmechanimMinority value = 0 }
	set_variable = { which = nbmechanimDev value = 0 }
	set_variable = { which = nbmechanimCoredDev value = 0 }
	set_variable = { which = nbogreMajority value = 0 }
	set_variable = { which = nbogreMinority value = 0 }
	set_variable = { which = nbogreDev value = 0 }
	set_variable = { which = nbogreCoredDev value = 0 }
	set_variable = { which = nborcishMajority value = 0 }
	set_variable = { which = nborcishMinority value = 0 }
	set_variable = { which = nborcishDev value = 0 }
	set_variable = { which = nborcishCoredDev value = 0 }
	set_variable = { which = nbruinbornMajority value = 0 }
	set_variable = { which = nbruinbornMinority value = 0 }
	set_variable = { which = nbruinbornDev value = 0 }
	set_variable = { which = nbruinbornCoredDev value = 0 }
	set_variable = { which = nbtrollMajority value = 0 }
	set_variable = { which = nbtrollMinority value = 0 }
	set_variable = { which = nbttrollDev value = 0 }
	set_variable = { which = nbttrollCoredDev value = 0 }

	set_variable = { which = nbTotalDev value = 0 }
	set_variable = { which = nbTotalCoredDev value = 0 }

	country_event = { id = racial_pop_misc.100 }

	change_variable = { which = nbTotalCoredDev which = nbcentaurCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbdwarvenCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbelvenCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbgoblinCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbgnollishCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbgnomishCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbhalf_elvenCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbhalf_orcishCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbhalflingCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbharimariCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbharpyCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbhobgoblinCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbhumanCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbkoboldCoredDev }
	change_variable = { which = nbTotalCoredDev which = nblizardfolkCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbmechanimCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbogreCoredDev }
	change_variable = { which = nbTotalCoredDev which = nborcishCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbruinbornCoredDev }
	change_variable = { which = nbTotalCoredDev which = nbtrollCoredDev }

	change_variable = { which = nbTotalDev which = nbcentaurDev }
	change_variable = { which = nbTotalDev which = nbdwarvenDev }
	change_variable = { which = nbTotalDev which = nbelvenDev }
	change_variable = { which = nbTotalDev which = nbgoblinDev }
	change_variable = { which = nbTotalDev which = nbgnollishDev }
	change_variable = { which = nbTotalDev which = nbgnomishDev }
	change_variable = { which = nbTotalDev which = nbhalf_elvenDev }
	change_variable = { which = nbTotalDev which = nbhalf_orcishDev }
	change_variable = { which = nbTotalDev which = nbhalflingDev }
	change_variable = { which = nbTotalDev which = nbharimariDev }
	change_variable = { which = nbTotalDev which = nbharpyDev }
	change_variable = { which = nbTotalDev which = nbhobgoblinDev }
	change_variable = { which = nbTotalDev which = nbhumanDev }
	change_variable = { which = nbTotalDev which = nbkoboldDev }
	change_variable = { which = nbTotalDev which = nblizardfolkDev }
	change_variable = { which = nbTotalDev which = nbmechanimDev }
	change_variable = { which = nbTotalDev which = nbogreDev }
	change_variable = { which = nbTotalDev which = nborcishDev }
	change_variable = { which = nbTotalDev which = nbruinbornDev }
	change_variable = { which = nbTotalDev which = nbtrollDev }

	pop_menu_round_and_percent = { which = nbcentaurCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbdwarvenCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbelvenCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbgnollishCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbgnomishCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbgoblinCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbhalf_elvenCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbhalf_orcishCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbhalflingCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbharimariCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbharpyCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbhobgoblinCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbhumanCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbkoboldCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nblizardfolkCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbmechanimCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbogreCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nborcishCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbruinbornCoredDev total = nbTotalCoredDev }
	pop_menu_round_and_percent = { which = nbtrollCoredDev total = nbTotalCoredDev }

	pop_menu_round_and_percent = { which = nbcentaurDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbdwarvenDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbelvenDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbgnollishDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbgnomishDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbgoblinDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhalf_elvenDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhalf_orcishDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhalflingDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbharimariDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbharpyDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhobgoblinDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbhumanDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbkoboldDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nblizardfolkDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbmechanimDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbogreDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nborcishDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbruinbornDev total = nbTotalDev }
	pop_menu_round_and_percent = { which = nbtrollDev total = nbTotalDev }
}

racial_list_store_race_development_vars = {
	##Store variables in provinces
	set_variable = { which = nbRaceDev which = nbcentaurDev }		1 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbdwarvenDev }		2 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbelvenDev }			3 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbgnollishDev }		4 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbgnomishDev }		5 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbgoblinDev }		6 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbhalf_elvenDev }	7 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbhalf_orcishDev }	8 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbhalflingDev }		9 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbharimariDev }		10 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbharpyDev }			11 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbhobgoblinDev }		12 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbhumanDev }			13 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbkoboldDev }		14 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nblizardfolkDev }	15 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbmechanimDev }		16 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbogreDev }			17 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nborcishDev }		18 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbruinbornDev }		19 = { set_variable = { which = nbRaceDev which = ROOT } }
	set_variable = { which = nbRaceDev which = nbtrollDev }			20 = { set_variable = { which = nbRaceDev which = ROOT } }
}

calculate_province_race_values = {
	if = {
		limit = {
			fast_has_pop_of_race = { race = $RACE$ }
		}
		if = { limit = { has_$RACE$_majority_trigger = yes }
			ROOT = {
				export_to_variable = { which = temp value = development who = PREV }
				change_variable = { which = nb$RACE$Dev which = temp }
				change_variable = { which = nb$RACE$Majority value = 1 }
			}
			if = {
				limit = {
					is_state = yes
					is_state_core = ROOT
				}
				ROOT = {
					change_variable = { which = nb$RACE$CoredDev which = temp }
				}
			}
		}
		else_if = { limit = { has_small_$RACE$_minority_trigger = yes }
			ROOT = {
				export_to_variable = { which = temp value = development who = PREV }
				multiply_variable = { which = temp value = 0.05 }
				change_variable = { which = nb$RACE$Dev which = temp }
				change_variable = { which = nb$RACE$Minority value = 1 }
			}
			if = {
				limit = {
					is_state = yes
					is_state_core = ROOT
				}
				ROOT = {
					change_variable = { which = nb$RACE$CoredDev which = temp }
				}
			}
		}
		else_if = { limit = { has_large_$RACE$_minority_trigger = yes }
			ROOT = {
				export_to_variable = { which = temp value = development who = PREV }
				multiply_variable = { which = temp value = 0.1 }
				change_variable = { which = nb$RACE$Dev which = temp }
				change_variable = { which = nb$RACE$Minority value = 1 }
			}
			if = {
				limit = {
					is_state = yes
					is_state_core = ROOT
				}
				ROOT = {
					change_variable = { which = nb$RACE$CoredDev which = temp }
				}
			}
		}
	}
}

pop_menu_round_and_percent = {
	divide_variable = { which = $which$ which = $total$ }
	multiply_variable = { which = $which$ value = 100 }
	# If $which$ is greater or equal to value (1), round the number
	if = {
		limit = { check_variable = { which = $which$ value = 1 } }
		round_variable = { which = $which$ value = 0 }
	}
}

# Call this to clear currently opened pop menu flags then set a new one
racial_pop_race_menu_clear = {
	clr_country_flag = racial_pop_has_centaur_menu_open
	clr_country_flag = racial_pop_has_dwarven_menu_open
	clr_country_flag = racial_pop_has_elven_menu_open
	clr_country_flag = racial_pop_has_gnollish_menu_open
	clr_country_flag = racial_pop_has_gnomish_menu_open
	clr_country_flag = racial_pop_has_goblin_menu_open
	clr_country_flag = racial_pop_has_half_elven_menu_open
	clr_country_flag = racial_pop_has_half_orcish_menu_open
	clr_country_flag = racial_pop_has_halfling_menu_open
	clr_country_flag = racial_pop_has_harimari_menu_open
	clr_country_flag = racial_pop_has_harpy_menu_open
	clr_country_flag = racial_pop_has_hobgoblin_menu_open
	clr_country_flag = racial_pop_has_human_menu_open
	clr_country_flag = racial_pop_has_kobold_menu_open
	clr_country_flag = racial_pop_has_lizardfolk_menu_open
	clr_country_flag = racial_pop_has_mechanim_menu_open
	clr_country_flag = racial_pop_has_ogre_menu_open
	clr_country_flag = racial_pop_has_orcish_menu_open
	clr_country_flag = racial_pop_has_ruinborn_menu_open
	clr_country_flag = racial_pop_has_troll_menu_open
}
# Call this to clear currently opened mil menu flags then set a new one
racial_mil_race_menu_clear = {
	clr_country_flag = racial_mil_has_centaur_menu_open
	clr_country_flag = racial_mil_has_dwarven_menu_open
	clr_country_flag = racial_mil_has_elven_menu_open
	clr_country_flag = racial_mil_has_gnollish_menu_open
	clr_country_flag = racial_mil_has_gnomish_menu_open
	clr_country_flag = racial_mil_has_goblin_menu_open
	clr_country_flag = racial_mil_has_half_elven_menu_open
	clr_country_flag = racial_mil_has_half_orcish_menu_open
	clr_country_flag = racial_mil_has_halfling_menu_open
	clr_country_flag = racial_mil_has_harimari_menu_open
	clr_country_flag = racial_mil_has_harpy_menu_open
	clr_country_flag = racial_mil_has_hobgoblin_menu_open
	clr_country_flag = racial_mil_has_human_menu_open
	clr_country_flag = racial_mil_has_kobold_menu_open
	clr_country_flag = racial_mil_has_lizardfolk_menu_open
	clr_country_flag = racial_mil_has_mechanim_menu_open
	clr_country_flag = racial_mil_has_ogre_menu_open
	clr_country_flag = racial_mil_has_orcish_menu_open
	clr_country_flag = racial_mil_has_ruinborn_menu_open
	clr_country_flag = racial_mil_has_troll_menu_open
	clr_country_flag = racial_mil_has_spirit_menu_open
	clr_country_flag = racial_mil_has_undead_menu_open
}


# Effect to enable policy buttons that are race-agnostic
# Check for currently viewed race then apply the (older) scripted effects
# Requires $verb$ = start, end
# Requires $rppolicy$ = purge, expulsion, or focus
# Interacts with: 	generic_start_purge, generic_start_expulsion, generic_start_focus,
# 					generic_end_purge, generic_end_expulsion, generic_end_focus
### THE ORIGINAL SCRIPTED TRIGGERS REQUIRE LOWERCASE race
# Must be if and not else_if or trigger_switch as these scripted effects can fire events
racial_pop_on_click_generic_verb_policy = {
	if = {
		limit = { has_country_flag = racial_pop_has_centaur_menu_open }
		generic_$verb$_$rppolicy$ = { race = centaur }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_dwarven_menu_open }
		generic_$verb$_$rppolicy$ = { race = dwarven }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_elven_menu_open }
		generic_$verb$_$rppolicy$ = { race = elven }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_gnollish_menu_open }
		generic_$verb$_$rppolicy$ = { race = gnollish }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_gnomish_menu_open }
		generic_$verb$_$rppolicy$ = { race = gnomish }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_goblin_menu_open }
		generic_$verb$_$rppolicy$ = { race = goblin }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_half_elven_menu_open }
		generic_$verb$_$rppolicy$ = { race = half_elven }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_half_orcish_menu_open }
		generic_$verb$_$rppolicy$ = { race = half_orcish }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_halfling_menu_open }
		generic_$verb$_$rppolicy$ = { race = halfling }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_harimari_menu_open }
		generic_$verb$_$rppolicy$ = { race = harimari }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_harpy_menu_open }
		generic_$verb$_$rppolicy$ = { race = harpy }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_hobgoblin_menu_open }
		generic_$verb$_$rppolicy$ = { race = hobgoblin }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_human_menu_open }
		generic_$verb$_$rppolicy$ = { race = human }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_kobold_menu_open }
		generic_$verb$_$rppolicy$ = { race = kobold }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_lizardfolk_menu_open }
		generic_$verb$_$rppolicy$ = { race = lizardfolk }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_mechanim_menu_open }
		generic_$verb$_$rppolicy$ = { race = mechanim }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_ogre_menu_open }
		generic_$verb$_$rppolicy$ = { race = ogre }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_orcish_menu_open }
		generic_$verb$_$rppolicy$ = { race = orcish }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_ruinborn_menu_open }
		generic_$verb$_$rppolicy$ = { race = ruinborn }
	}
	if = {
		limit = { has_country_flag = racial_pop_has_troll_menu_open }
		generic_$verb$_$rppolicy$ = { race = troll }
	}
	#Add more here for additional races
}

# Scripted effect "racial_expel_disabled_tt" requires $RACE$
racial_menu_tooltip_race_selector = {
	trigger_switch = {
		on_trigger = has_country_flag
		racial_pop_has_centaur_menu_open = { $tooltip$ = { RACE = centaur } }
		racial_pop_has_dwarven_menu_open = { $tooltip$ = { RACE = dwarven } }
		racial_pop_has_elven_menu_open = { $tooltip$ = { RACE = elven } }
		racial_pop_has_gnollish_menu_open = { $tooltip$ = { RACE = gnollish } }
		racial_pop_has_gnomish_menu_open = { $tooltip$ = { RACE = gnomish } }
		racial_pop_has_goblin_menu_open = { $tooltip$ = { RACE = goblin } }
		racial_pop_has_half_elven_menu_open = { $tooltip$ = { RACE = half_elven } }
		racial_pop_has_half_orcish_menu_open = { $tooltip$ = { RACE = half_orcish } }
		racial_pop_has_halfling_menu_open = { $tooltip$ = { RACE = halfling } }
		racial_pop_has_harimari_menu_open = { $tooltip$ = { RACE = harimari } }
		racial_pop_has_harpy_menu_open = { $tooltip$ = { RACE = harpy } }
		racial_pop_has_hobgoblin_menu_open = { $tooltip$ = { RACE = hobgoblin } }
		racial_pop_has_human_menu_open = { $tooltip$ = { RACE = human } }
		racial_pop_has_kobold_menu_open = { $tooltip$ = { RACE = kobold } }
		racial_pop_has_lizardfolk_menu_open = { $tooltip$ = { RACE = lizardfolk } }
		racial_pop_has_mechanim_menu_open = { $tooltip$ = { RACE = mechanim } }
		racial_pop_has_ogre_menu_open = { $tooltip$ = { RACE = ogre } }
		racial_pop_has_orcish_menu_open = { $tooltip$ = { RACE = orcish } }
		racial_pop_has_ruinborn_menu_open = { $tooltip$ = { RACE = ruinborn } }
		racial_pop_has_troll_menu_open = { $tooltip$ = { RACE = troll } }
		#Add more here for additional races
	}
}

# Initialises the UI - this is on clicking the button in countrygovernmentview
racial_pop_initialise_effect = {
	hidden_effect = {
		pop_menu_main_setup = yes #Do the pop calcs
		racial_list_store_dev_ranking_effect = yes
		clr_country_flag = racial_pop_list_is_sorted
		racial_list_sort_prov_race_ranks_dec = yes #Sort by pop%
		racial_interface_update_main = yes #Set all the correct variables
	}
}
## Call this effect to update the list UI
# Works through every button to update its variables
racial_interface_update_main = {
	racial_interface_update = { order = 1 }
	racial_interface_update = { order = 2 }
	racial_interface_update = { order = 3 }
	racial_interface_update = { order = 4 }
	racial_interface_update = { order = 5 }
	racial_interface_update = { order = 6 }
	racial_interface_update = { order = 7 }
	racial_interface_update = { order = 8 }
	racial_interface_update = { order = 9 }
	racial_interface_update = { order = 10 }
	racial_interface_update = { order = 11 }
	racial_interface_update = { order = 12 }
	racial_interface_update = { order = 13 }
	racial_interface_update = { order = 14 }
	racial_interface_update = { order = 15 }
	racial_interface_update = { order = 16 }
	racial_interface_update = { order = 17 }
	racial_interface_update = { order = 18 }
	racial_interface_update = { order = 19 }
	racial_interface_update = { order = 20 }
	# Add more here for additional buttons if desired
}
# Brute forces each $order$ number against each races ranking to find the correct race for the tested rank
racial_interface_update = {
	racial_interface_update_condition = { order = $order$ race = centaur racenum = 1 }
	racial_interface_update_condition = { order = $order$ race = dwarven racenum = 2 }
	racial_interface_update_condition = { order = $order$ race = elven racenum = 3 }
	racial_interface_update_condition = { order = $order$ race = gnollish racenum = 4 }
	racial_interface_update_condition = { order = $order$ race = gnomish racenum = 5 }
	racial_interface_update_condition = { order = $order$ race = goblin racenum = 6 }
	racial_interface_update_condition = { order = $order$ race = half_elven racenum = 7 }
	racial_interface_update_condition = { order = $order$ race = half_orcish racenum = 8 }
	racial_interface_update_condition = { order = $order$ race = halfling racenum = 9 }
	racial_interface_update_condition = { order = $order$ race = harimari racenum = 10 }
	racial_interface_update_condition = { order = $order$ race = harpy racenum = 11 }
	racial_interface_update_condition = { order = $order$ race = hobgoblin racenum = 12 }
	racial_interface_update_condition = { order = $order$ race = human racenum = 13 }
	racial_interface_update_condition = { order = $order$ race = kobold racenum = 14 }
	racial_interface_update_condition = { order = $order$ race = lizardfolk racenum = 15 }
	racial_interface_update_condition = { order = $order$ race = mechanim racenum = 16 }
	racial_interface_update_condition = { order = $order$ race = ogre racenum = 17 }
	racial_interface_update_condition = { order = $order$ race = orcish racenum = 18 }
	racial_interface_update_condition = { order = $order$ race = ruinborn racenum = 19 }
	racial_interface_update_condition = { order = $order$ race = troll racenum = 20 }
	#Add more here for additional races
}
# The testing function - is $race$ at this position?
racial_interface_update_condition = {
	if = {
		limit = {
			is_variable_equal = { which = $race$Ranking value = $order$ }
		}
		hidden_effect = {
			racial_interface_update_effects = { race = $race$ racenum = $racenum$ order = $order$ }
		}
	}
}
#Finally, the actual effect to update the UI
racial_interface_update_effects = {
	# Set frame variables
	set_variable = { which = racial_list_interface_race_icon_frame_$order$ value = $racenum$ } #Race icon
	set_variable = { which = raceRanking value = $order$ }
	set_variable = { which = $race$_tolerance_sort_var which = $race$_race_tolerance } #For sorting to make primary #1
	set_variable = { which = raceNumVar value = $racenum$ }
	set_variable = { which = raceDevVar which = nb$race$CoredDev }
	set_variable = { which = raceTolVar which = $race$_race_tolerance }
	# Set variables in <provinceID=$order$> for custom loc to read
	$order$ = {
		set_variable = { which = raceNumVar which = ROOT }
		set_variable = { which = raceDevVar which = ROOT }
		set_variable = { which = raceTolVar which = ROOT }
	}
	racial_interface_check_primary = { race = $race$ order = $order$ }
	racial_interface_check_military = { race = $race$ order = $order$ }
	racial_interface_check_devpercent = { RACE = $race$ order = $order$ } #RACE needs caps
	racial_interface_check_tolerance = { race = $race$ order = $order$ }
	racial_interface_check_policy = { race = $race$ order = $order$ }
	racial_interface_check_focus = { race = $race$ order = $order$ }
}
#Check if the button should show the racial administration icon
racial_interface_check_primary = {
	if = { limit = { has_country_modifier = $race$_administration }
		set_country_flag = racial_pop_list_admin_$order$
		change_variable = { which = $race$_tolerance_sort_var value = 200 } #For sorting to make primary #1, arbitrary value
	}
	else = { clr_country_flag = racial_pop_list_admin_$order$
	}
}
#Check if the button should show the racial military icon
racial_interface_check_military = {
	if = { limit = { has_country_modifier = $race$_military }
		set_country_flag = racial_list_interface_military_$order$
	}
	else = { clr_country_flag = racial_list_interface_military_$order$
	}
}
#Set the pop% variable displayed by the button to the correct value for the race
racial_interface_check_devpercent = {
	set_variable = { which = racial_list_interface_percent_$order$ which = nb$RACE$Dev }
	if = {
		limit = {
			is_variable_equal = { which = racial_list_interface_percent_$order$ value = 0 }
			check_variable = { $RACE$_count = 1 }
		}
		change_variable = { racial_list_interface_percent_$order$ = 0.002 }
	}
}
#Check racial tolerance and set the frame_variable
racial_interface_check_tolerance = {
	if = {
		limit = {
			OR = {
				check_variable = { which = $race$_race_tolerance value = 70 }
				has_country_modifier = $race$_administration
			}
		}
		# Integrated
		set_variable = { which = racial_list_interface_tolerance_frame_$order$ value = 3 }
	}
	else_if = {
		limit = { check_variable = { which = $race$_race_tolerance value = 31 } }
		# Accepted
		set_variable = { which = racial_list_interface_tolerance_frame_$order$ value = 2 }
	}
	else = {
		# Oppressed
		set_variable = { which = racial_list_interface_tolerance_frame_$order$ value = 1 }
	}
}
#Check policies and set icons to display for the button
racial_interface_check_policy = {
	if = {
		limit = { has_country_modifier = racial_pop_$race$_purge }
		# Purge icon
		set_variable = { which = racial_list_interface_policy_frame_$order$ value = 1 }
	}
	else_if = {
		limit = { has_country_modifier = racial_pop_$race$_expulsion }
		# Expulsion icon
		set_variable = { which = racial_list_interface_policy_frame_$order$ value = 2 }
	}
	else = {
		# No icon, still needs to be explicitly set
		set_variable = { which = racial_list_interface_policy_frame_$order$ value = 3 }
	}
}
#Check if focus and sets if icon to display for the button
racial_interface_check_focus = {
	if = { limit = { has_country_modifier = racial_focus_$race$ }
		set_variable = { which = racial_list_interface_focus_var_$order$ value = 1 }
	}
	else = { set_variable = { which = racial_list_interface_focus_var_$order$ value = 0 }
	}
}


###################
# List interface  #
###################

# Buttons are scripted to pass their order as an argument
# On clicking a list button, brute forces $order$ against each races' ranking to find the correct race for the button
racial_list_interface_button_click = {
	# Clear flags for previously shown race
	racial_pop_race_menu_clear = yes
	racial_mil_race_menu_clear = yes
	
	racial_list_interface_button_click_condition = { order = $order$ race = centaur racenum = 1 }
	racial_list_interface_button_click_condition = { order = $order$ race = dwarven racenum = 2 }
	racial_list_interface_button_click_condition = { order = $order$ race = elven racenum = 3 }
	racial_list_interface_button_click_condition = { order = $order$ race = gnollish racenum = 4 }
	racial_list_interface_button_click_condition = { order = $order$ race = gnomish racenum = 5 }
	racial_list_interface_button_click_condition = { order = $order$ race = goblin racenum = 6 }
	racial_list_interface_button_click_condition = { order = $order$ race = half_elven racenum = 7 }
	racial_list_interface_button_click_condition = { order = $order$ race = half_orcish racenum = 8 }
	racial_list_interface_button_click_condition = { order = $order$ race = halfling racenum = 9 }
	racial_list_interface_button_click_condition = { order = $order$ race = harimari racenum = 10 }
	racial_list_interface_button_click_condition = { order = $order$ race = harpy racenum = 11 }
	racial_list_interface_button_click_condition = { order = $order$ race = hobgoblin racenum = 12 }
	racial_list_interface_button_click_condition = { order = $order$ race = human racenum = 13 }
	racial_list_interface_button_click_condition = { order = $order$ race = kobold racenum = 14 }
	racial_list_interface_button_click_condition = { order = $order$ race = lizardfolk racenum = 15 }
	racial_list_interface_button_click_condition = { order = $order$ race = mechanim racenum = 16 }
	racial_list_interface_button_click_condition = { order = $order$ race = ogre racenum = 17 }
	racial_list_interface_button_click_condition = { order = $order$ race = orcish racenum = 18 }
	racial_list_interface_button_click_condition = { order = $order$ race = ruinborn racenum = 19 }
	racial_list_interface_button_click_condition = { order = $order$ race = troll racenum = 20 }
	#Add more here for additional races and buttons
	
}
# Testing function - is $race$ at this position?
racial_list_interface_button_click_condition = {
	if = { limit = { is_variable_equal = { which = $race$Ranking value = $order$ } }
		custom_tooltip = racial_pop_$race$_tt
		hidden_effect = {
			racial_list_interface_button_click_effect = { race = $race$ racenum = $racenum$ }
		}
	}
}
#What the game will do when it gets to the correct race for the button clicked
racial_list_interface_button_click_effect = {
	# Set new flags regarding which races' menu is open
	set_variable = { which = rp_selected_race_var value = $racenum$ } #Framevar
	set_country_flag = racial_pop_has_$race$_menu_open
	set_country_flag = racial_mil_has_$race$_menu_open
	# Update racial details UI
	racial_pop_interface_update_effects = { RACE = $race$ }
}
# Generic effect to update racial_pop_interface
# Checks flags to determine which races' interface is open then passes it as an argument
racial_pop_interface_update_main = {
	racial_interface_update_main = yes #Update list interface first, then update pop interface
	trigger_switch = {
		on_trigger = has_country_flag
		racial_pop_has_centaur_menu_open = { racial_pop_interface_update_effects = { RACE = centaur } }
		racial_pop_has_dwarven_menu_open = { racial_pop_interface_update_effects = { RACE = dwarven } }
		racial_pop_has_elven_menu_open = { racial_pop_interface_update_effects = { RACE = elven } }
		racial_pop_has_gnollish_menu_open = { racial_pop_interface_update_effects = { RACE = gnollish } }
		racial_pop_has_gnomish_menu_open = { racial_pop_interface_update_effects = { RACE = gnomish } }
		racial_pop_has_goblin_menu_open = { racial_pop_interface_update_effects = { RACE = goblin } }
		racial_pop_has_half_elven_menu_open = { racial_pop_interface_update_effects = { RACE = half_elven } }
		racial_pop_has_half_orcish_menu_open = { racial_pop_interface_update_effects = { RACE = half_orcish } }
		racial_pop_has_halfling_menu_open = { racial_pop_interface_update_effects = { RACE = halfling } }
		racial_pop_has_harimari_menu_open = { racial_pop_interface_update_effects = { RACE = harimari } }
		racial_pop_has_harpy_menu_open = { racial_pop_interface_update_effects = { RACE = harpy } }
		racial_pop_has_hobgoblin_menu_open = { racial_pop_interface_update_effects = { RACE = hobgoblin } }
		racial_pop_has_human_menu_open = { racial_pop_interface_update_effects = { RACE = human } }
		racial_pop_has_kobold_menu_open = { racial_pop_interface_update_effects = { RACE = kobold } }
		racial_pop_has_lizardfolk_menu_open = { racial_pop_interface_update_effects = { RACE = lizardfolk } }
		racial_pop_has_mechanim_menu_open = { racial_pop_interface_update_effects = { RACE = mechanim } }
		racial_pop_has_ogre_menu_open = { racial_pop_interface_update_effects = { RACE = ogre } }
		racial_pop_has_orcish_menu_open = { racial_pop_interface_update_effects = { RACE = orcish } }
		racial_pop_has_ruinborn_menu_open = { racial_pop_interface_update_effects = { RACE = ruinborn } }
		racial_pop_has_troll_menu_open = { racial_pop_interface_update_effects = { RACE = troll } }
		#Add more here for additional races
	}
}
# Call directly to update the racial pop interface if $RACE$ is already known
# The nb$RACE$ variables (and some others) come from the older pop interface code (which this rework does not reimplement)
racial_pop_interface_update_effects = {
	set_variable = { which = rpRaceOwned which = nb$RACE$Dev }
	set_variable = { which = rpRaceCored which = nb$RACE$CoredDev }
	set_variable = { which = rpRaceMajor which = nb$RACE$Majority }
	set_variable = { which = rpRaceMinor which = nb$RACE$Minority }
	set_variable = { which = rpRaceTolerance which = $RACE$_race_tolerance }
	racial_pop_current_race_administration_check = { race = $RACE$ }
	racial_pop_current_race_policy_check = { race = $RACE$ }
}
#Checks and sets whether this is the primary race (for tolerance)
racial_pop_current_race_administration_check = {
	clr_country_flag = rp_current_administration_true
	if = {
		limit = {
			has_country_modifier = $race$_administration
		}
	set_country_flag = rp_current_administration_true
	}
}
# Checks the policies towards the currently selected race
racial_pop_current_race_policy_check = {
	racial_list_policy_adder_effect = { race = $race$ }
	set_variable = { which = rp_current_race_policy_framevar which = $race$PolicyCount }
}

###################
# Sorting effects #
###################
# These effects are used to store relevant variables in provinces 1-20 so the respective buttons
# 	can display the right information
# They should be executed by clicking heading buttons above the list to be sorted
# Each sorting script should be skipped if a flag 'rpIsSorted' is set, and have the buttons clear it then call their respective sort

#Clear flags indicating province has been sorted
racial_list_sort_flags_clr = {
	clr_country_flag = racial_pop_list_is_sorted
	clr_country_flag = rp_sort_rank_dec
	clr_country_flag = rp_sort_rank_asc
	clr_country_flag = rp_sort_name_dec
	clr_country_flag = rp_sort_name_asc
	clr_country_flag = rp_sort_tolerance_dec
	clr_country_flag = rp_sort_tolerance_asc
	clr_country_flag = rp_sort_policy_dec
	clr_country_flag = rp_sort_policy_asc
}
# Inverts the rank value ($race$Ranking variables are in ROOT)
racial_list_sort_invert_rank_value = {
	set_variable = { which = rpRankInvert value = 21 } #Number of races + 1
	subtract_variable = { which = rpRankInvert which = $raceRanking$ }
	set_variable = { which = $raceRanking$ which = rpRankInvert }
}
# Set the raceRanking to ascending alphabetical order
racial_list_sort_prov_name_rank_asc = {
	if = { limit = { NOT = { has_country_flag = racial_pop_list_is_sorted } }
		set_country_flag = racial_pop_list_is_sorted
		set_country_flag = rp_sort_name_asc
		set_variable = { which = centaurRanking value = 1 }
		set_variable = { which = dwarvenRanking value = 2 }
		set_variable = { which = elvenRanking value = 3 }
		set_variable = { which = gnollishRanking value = 4 }
		set_variable = { which = gnomishRanking value = 5 }
		set_variable = { which = goblinRanking value = 6 }
		set_variable = { which = half_elvenRanking value = 7 }
		set_variable = { which = half_orcishRanking value = 8 }
		set_variable = { which = halflingRanking value = 9 }
		set_variable = { which = harimariRanking value = 10 }
		set_variable = { which = harpyRanking value = 11 }
		set_variable = { which = hobgoblinRanking value = 12 }
		set_variable = { which = humanRanking value = 13 }
		set_variable = { which = koboldRanking value = 14 }
		set_variable = { which = lizardfolkRanking value = 15 }
		set_variable = { which = mechanimRanking value = 16 }
		set_variable = { which = ogreRanking value = 17 }
		set_variable = { which = orcishRanking value = 18 }
		set_variable = { which = ruinbornRanking value = 19 }
		set_variable = { which = trollRanking value = 20 }
	}
}
# Set the raceRanking to descending alphabetical order (easier than invert)
racial_list_sort_prov_name_rank_dec = {
	if = { limit = { NOT = { has_country_flag = racial_pop_list_is_sorted } }
		set_country_flag = racial_pop_list_is_sorted
		set_country_flag = rp_sort_name_dec
		set_variable = { which = centaurRanking value = 20 }
		set_variable = { which = dwarvenRanking value = 19 }
		set_variable = { which = elvenRanking value = 18 }
		set_variable = { which = gnollishRanking value = 17 }
		set_variable = { which = gnomishRanking value = 16 }
		set_variable = { which = goblinRanking value = 15 }
		set_variable = { which = half_elvenRanking value = 14 }
		set_variable = { which = half_orcishRanking value = 13 }
		set_variable = { which = halflingRanking value = 12 }
		set_variable = { which = harimariRanking value = 11 }
		set_variable = { which = harpyRanking value = 10 }
		set_variable = { which = hobgoblinRanking value = 9 }
		set_variable = { which = humanRanking value = 8 }
		set_variable = { which = koboldRanking value = 7 }
		set_variable = { which = lizardfolkRanking value = 6 }
		set_variable = { which = mechanimRanking value = 5 }
		set_variable = { which = ogreRanking value = 4 }
		set_variable = { which = orcishRanking value = 3 }
		set_variable = { which = ruinbornRanking value = 2 }
		set_variable = { which = trollRanking value = 1 }
	}
}
# Store the development ranks (raceDevRanking) in provinces 1-20 (to avoid repeating the costly calculations just to sort)
racial_list_store_dev_ranking_effect = {
	set_variable = { which = raceDevRanking which = centaurRanking } 1 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = dwarvenRanking } 2 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = elvenRanking } 3 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = gnollishRanking } 4 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = gnomishRanking } 5 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = goblinRanking } 6 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = half_elvenRanking } 7 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = half_orcishRanking } 8 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = halflingRanking } 9 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = harimariRanking } 10 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = harpyRanking } 11 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = hobgoblinRanking } 12 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = humanRanking } 13 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = koboldRanking } 14 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = lizardfolkRanking } 15 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = mechanimRanking } 16 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = ogreRanking } 17 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = orcishRanking } 18 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = ruinbornRanking } 19 = { set_variable = { which = raceDevRanking which = ROOT } }
	set_variable = { which = raceDevRanking which = trollRanking } 20 = { set_variable = { which = raceDevRanking which = ROOT } }
}

# In <province> restore previously sorted raceRanking vars (in raceDevRanking) (it is already sorted)
racial_list_sort_prov_race_ranks_dec = {
	if = { limit = { NOT = { has_country_flag = racial_pop_list_is_sorted } }
		set_country_flag = racial_pop_list_is_sorted
		set_country_flag = rp_sort_rank_dec
		1 = { set_variable = { which = centaurRanking which = raceDevRanking } ROOT = { set_variable = { which = centaurRanking which = PREV } } }
		2 = { set_variable = { which = dwarvenRanking which = raceDevRanking } ROOT = { set_variable = { which = dwarvenRanking which = PREV } } }
		3 = { set_variable = { which = elvenRanking which = raceDevRanking } ROOT = { set_variable = { which = elvenRanking which = PREV } } }
		4 = { set_variable = { which = gnollishRanking which = raceDevRanking } ROOT = { set_variable = { which = gnollishRanking which = PREV } } }
		5 = { set_variable = { which = gnomishRanking which = raceDevRanking } ROOT = { set_variable = { which = gnomishRanking which = PREV } } }
		6 = { set_variable = { which = goblinRanking which = raceDevRanking } ROOT = { set_variable = { which = goblinRanking which = PREV } } }
		7 = { set_variable = { which = half_elvenRanking which = raceDevRanking } ROOT = { set_variable = { which = half_elvenRanking which = PREV } } }
		8 = { set_variable = { which = half_orcishRanking which = raceDevRanking } ROOT = { set_variable = { which = half_orcishRanking which = PREV } } }
		9 = { set_variable = { which = halflingRanking which = raceDevRanking } ROOT = { set_variable = { which = halflingRanking which = PREV } } }
		10 = { set_variable = { which = harimariRanking which = raceDevRanking } ROOT = { set_variable = { which = harimariRanking which = PREV } } }
		11 = { set_variable = { which = harpyRanking which = raceDevRanking } ROOT = { set_variable = { which = harpyRanking which = PREV } } }
		12 = { set_variable = { which = hobgoblinRanking which = raceDevRanking } ROOT = { set_variable = { which = hobgoblinRanking which = PREV } } }
		13 = { set_variable = { which = humanRanking which = raceDevRanking } ROOT = { set_variable = { which = humanRanking which = PREV } } }
		14 = { set_variable = { which = koboldRanking which = raceDevRanking } ROOT = { set_variable = { which = koboldRanking which = PREV } } }
		15 = { set_variable = { which = lizardfolkRanking which = raceDevRanking } ROOT = { set_variable = { which = lizardfolkRanking which = PREV } } }
		16 = { set_variable = { which = mechanimRanking which = raceDevRanking } ROOT = { set_variable = { which = mechanimRanking which = PREV } } }
		17 = { set_variable = { which = ogreRanking which = raceDevRanking } ROOT = { set_variable = { which = ogreRanking which = PREV } } }
		18 = { set_variable = { which = orcishRanking which = raceDevRanking } ROOT = { set_variable = { which = orcishRanking which = PREV } } }
		19 = { set_variable = { which = ruinbornRanking which = raceDevRanking } ROOT = { set_variable = { which = ruinbornRanking which = PREV } } }
		20 = { set_variable = { which = trollRanking which = raceDevRanking } ROOT = { set_variable = { which = trollRanking which = PREV } } }
	}
}
# Invert each $race$Ranking variable
racial_list_sort_prov_race_ranks_asc = {
	if = { limit = { NOT = { has_country_flag = racial_pop_list_is_sorted } }
		set_country_flag = racial_pop_list_is_sorted
		set_country_flag = rp_sort_rank_asc
		racial_list_sort_invert_rank_value = { raceRanking = centaurRanking }
		racial_list_sort_invert_rank_value = { raceRanking = dwarvenRanking }
		racial_list_sort_invert_rank_value = { raceRanking = elvenRanking }
		racial_list_sort_invert_rank_value = { raceRanking = gnollishRanking }
		racial_list_sort_invert_rank_value = { raceRanking = gnomishRanking }
		racial_list_sort_invert_rank_value = { raceRanking = goblinRanking }
		racial_list_sort_invert_rank_value = { raceRanking = half_elvenRanking }
		racial_list_sort_invert_rank_value = { raceRanking = half_orcishRanking }
		racial_list_sort_invert_rank_value = { raceRanking = halflingRanking }
		racial_list_sort_invert_rank_value = { raceRanking = harimariRanking }
		racial_list_sort_invert_rank_value = { raceRanking = harpyRanking }
		racial_list_sort_invert_rank_value = { raceRanking = hobgoblinRanking }
		racial_list_sort_invert_rank_value = { raceRanking = humanRanking }
		racial_list_sort_invert_rank_value = { raceRanking = koboldRanking }
		racial_list_sort_invert_rank_value = { raceRanking = lizardfolkRanking }
		racial_list_sort_invert_rank_value = { raceRanking = mechanimRanking }
		racial_list_sort_invert_rank_value = { raceRanking = ogreRanking }
		racial_list_sort_invert_rank_value = { raceRanking = orcishRanking }
		racial_list_sort_invert_rank_value = { raceRanking = ruinbornRanking }
		racial_list_sort_invert_rank_value = { raceRanking = trollRanking }
	}
}
# Store the development ranks (raceDevRanking) in provinces 1-20
racial_list_store_tolerance_vars = {
	set_variable = { which = rpToleranceVar which = centaur_tolerance_sort_var } 1 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = dwarven_tolerance_sort_var } 2 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = elven_tolerance_sort_var } 3 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = gnollish_tolerance_sort_var } 4 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = gnomish_tolerance_sort_var } 5 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = goblin_tolerance_sort_var } 6 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = half_elven_tolerance_sort_var } 7 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = half_orcish_tolerance_sort_var } 8 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = halfling_tolerance_sort_var } 9 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = harimari_tolerance_sort_var } 10 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = harpy_tolerance_sort_var } 11 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = hobgoblin_tolerance_sort_var } 12 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = human_tolerance_sort_var } 13 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = kobold_tolerance_sort_var } 14 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = lizardfolk_tolerance_sort_var } 15 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = mechanim_tolerance_sort_var } 16 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = ogre_tolerance_sort_var } 17 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = orcish_tolerance_sort_var } 18 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = ruinborn_tolerance_sort_var } 19 = { set_variable = { which = rpToleranceVar which = ROOT } }
	set_variable = { which = rpToleranceVar which = troll_tolerance_sort_var } 20 = { set_variable = { which = rpToleranceVar which = ROOT } }
}
# Note that 1 should have the primary race if sorted by tolerance
racial_list_sort_by_tolerance_dec = {
	if = { limit = { NOT = { has_country_flag = racial_pop_list_is_sorted } }
		set_country_flag = racial_pop_list_is_sorted
		set_country_flag = rp_sort_tolerance_dec
		racial_list_store_tolerance_vars = yes
		racial_list_sorting_algorithm = { sortvar = rpToleranceVar descending = yes }
	}
}
# Note that 20 should have the primary race if sorted by tolerance
racial_list_sort_by_tolerance_asc = {
	if = { limit = { NOT = { has_country_flag = racial_pop_list_is_sorted } }
		set_country_flag = racial_pop_list_is_sorted
		set_country_flag = rp_sort_tolerance_asc
		racial_list_store_tolerance_vars = yes
		racial_list_sorting_algorithm = { sortvar = rpToleranceVar ascending = yes }
	}
}
# Generic sorting algorithm
# Pass the variable to sort against as $sortvar$
# $sortvar$ should already be on the province
racial_list_sorting_algorithm = {
	1 = { set_province_flag = not_sorted }
	2 = { set_province_flag = not_sorted }
	3 = { set_province_flag = not_sorted }
	4 = { set_province_flag = not_sorted }
	5 = { set_province_flag = not_sorted }
	6 = { set_province_flag = not_sorted }
	7 = { set_province_flag = not_sorted }
	8 = { set_province_flag = not_sorted }
	9 = { set_province_flag = not_sorted }
	10 = { set_province_flag = not_sorted }
	11 = { set_province_flag = not_sorted }
	12 = { set_province_flag = not_sorted }
	13 = { set_province_flag = not_sorted }
	14 = { set_province_flag = not_sorted }
	15 = { set_province_flag = not_sorted }
	16 = { set_province_flag = not_sorted }
	17 = { set_province_flag = not_sorted }
	18 = { set_province_flag = not_sorted }
	19 = { set_province_flag = not_sorted }
	20 = { set_province_flag = not_sorted }

	set_variable = { which = raceRanking value = 0 }
	
	[[descending]
	2 = { save_event_target_as = most_represented_race }
	while = { limit = { NOT = { check_variable = { which = raceRanking value = 20 } } }	#20 = nb of races
		change_variable = { which = raceRanking value = 1 }
		pop_menu_variables = {	#province group that has all the provinces with stored variables
			limit = {
				has_province_flag = not_sorted
				check_variable = { which = $sortvar$ which = event_target:most_represented_race }
			}
			save_event_target_as = most_represented_race
		}
		event_target:most_represented_race = {
			clr_province_flag = not_sorted
			racial_list_conversion_to_rank = yes
			set_variable = { which = $sortvar$ value = 0 }
		}
	}
	]
	[[ascending]
	2 = { save_event_target_as = least_represented_race }
	while = { limit = { NOT = { check_variable = { which = raceRanking value = 20 } } }	#20 = nb of races
		change_variable = { which = raceRanking value = 1 }
		pop_menu_variables = {	#province group that has all the provinces with stored variables
			limit = {
				has_province_flag = not_sorted
				NOT = { check_variable = { which = $sortvar$ which = event_target:least_represented_race } }
			}
			save_event_target_as = least_represented_race
		}
		event_target:least_represented_race = {
			clr_province_flag = not_sorted
			racial_list_conversion_to_rank = yes
			set_variable = { which = $sortvar$ value = 2100000 }
		}
	}
	]
}
# This generates the sorted rank from the province ID
racial_list_conversion_to_rank = {
	if = { limit = { province_id = 1 } ROOT = { set_variable = { which = centaurRanking which = raceRanking } } }
	else_if = { limit = { province_id = 2 } ROOT = { set_variable = { which = dwarvenRanking which = raceRanking } } }
	else_if = { limit = { province_id = 3 } ROOT = { set_variable = { which = elvenRanking which = raceRanking } } }
	else_if = { limit = { province_id = 4 } ROOT = { set_variable = { which = gnollishRanking which = raceRanking } } }
	else_if = { limit = { province_id = 5 } ROOT = { set_variable = { which = gnomishRanking which = raceRanking } } }
	else_if = { limit = { province_id = 6 } ROOT = { set_variable = { which = goblinRanking which = raceRanking } } }
	else_if = { limit = { province_id = 7 } ROOT = { set_variable = { which = half_elvenRanking which = raceRanking } } }
	else_if = { limit = { province_id = 8 } ROOT = { set_variable = { which = half_orcishRanking which = raceRanking } } }
	else_if = { limit = { province_id = 9 } ROOT = { set_variable = { which = halflingRanking which = raceRanking } } }
	else_if = { limit = { province_id = 10 } ROOT = { set_variable = { which = harimariRanking which = raceRanking } } }
	else_if = { limit = { province_id = 11 } ROOT = { set_variable = { which = harpyRanking which = raceRanking } } }
	else_if = { limit = { province_id = 12 } ROOT = { set_variable = { which = hobgoblinRanking which = raceRanking } } }
	else_if = { limit = { province_id = 13 } ROOT = { set_variable = { which = humanRanking which = raceRanking } } }
	else_if = { limit = { province_id = 14 } ROOT = { set_variable = { which = koboldRanking which = raceRanking } } }
	else_if = { limit = { province_id = 15 } ROOT = { set_variable = { which = lizardfolkRanking which = raceRanking } } }
	else_if = { limit = { province_id = 16 } ROOT = { set_variable = { which = mechanimRanking which = raceRanking } } }
	else_if = { limit = { province_id = 17 } ROOT = { set_variable = { which = ogreRanking which = raceRanking } } }
	else_if = { limit = { province_id = 18 } ROOT = { set_variable = { which = orcishRanking which = raceRanking } } }
	else_if = { limit = { province_id = 19 } ROOT = { set_variable = { which = ruinbornRanking which = raceRanking } } }
	else_if = { limit = { province_id = 20 } ROOT = { set_variable = { which = trollRanking which = raceRanking } } }
}
# Calculates the policies enacted for each race
racial_list_policy_adder_races = {
	racial_list_policy_adder_effect = { race = centaur }
	racial_list_policy_adder_effect = { race = dwarven }
	racial_list_policy_adder_effect = { race = elven }
	racial_list_policy_adder_effect = { race = gnollish }
	racial_list_policy_adder_effect = { race = gnomish }
	racial_list_policy_adder_effect = { race = goblin }
	racial_list_policy_adder_effect = { race = halfling }
	racial_list_policy_adder_effect = { race = half_elven }
	racial_list_policy_adder_effect = { race = half_orcish }
	racial_list_policy_adder_effect = { race = harimari }
	racial_list_policy_adder_effect = { race = harpy }
	racial_list_policy_adder_effect = { race = hobgoblin }
	racial_list_policy_adder_effect = { race = human }
	racial_list_policy_adder_effect = { race = kobold }
	racial_list_policy_adder_effect = { race = lizardfolk }
	racial_list_policy_adder_effect = { race = mechanim }
	racial_list_policy_adder_effect = { race = ogre }
	racial_list_policy_adder_effect = { race = orcish }
	racial_list_policy_adder_effect = { race = ruinborn }
	racial_list_policy_adder_effect = { race = troll }
}
#Calculates for each policy
racial_list_policy_adder_effect = {
	set_variable = { which = $race$PolicyCount value = 0 }
	if = { limit = { has_country_modifier = racial_focus_$race$ }
		change_variable = { which = $race$PolicyCount value = 1 }
	}
	if = { limit = { has_country_modifier = racial_pop_$race$_expulsion }
		change_variable = { which = $race$PolicyCount value = 2 }
	}
	if = { limit = { has_country_modifier = racial_pop_$race$_purge }
		change_variable = { which = $race$PolicyCount value = 4 }
	}
}
#Stores the policy values for each race in provinces 1-20 so they can be sorted
racial_list_store_policy_vars = {
	set_variable = { which = rpPolicyVar which = centaurPolicyCount } 1 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = dwarvenPolicyCount } 2 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = elvenPolicyCount } 3 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = gnollishPolicyCount } 4 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = gnomishPolicyCount } 5 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = goblinPolicyCount } 6 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = half_elvenPolicyCount } 7 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = half_orcishPolicyCount } 8 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = halflingPolicyCount } 9 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = harimariPolicyCount } 10 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = harpyPolicyCount } 11 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = hobgoblinPolicyCount } 12 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = humanPolicyCount } 13 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = koboldPolicyCount } 14 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = lizardfolkPolicyCount } 15 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = mechanimPolicyCount } 16 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = ogrePolicyCount } 17 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = orcishPolicyCount } 18 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = ruinbornPolicyCount } 19 = { set_variable = { which = rpPolicyVar which = ROOT } }
	set_variable = { which = rpPolicyVar which = trollPolicyCount } 20 = { set_variable = { which = rpPolicyVar which = ROOT } }
}
# Sort by policy count descending
racial_list_sort_by_policy_dec = {
	if = { limit = { NOT = { has_country_flag = racial_pop_list_is_sorted } }
		set_country_flag = racial_pop_list_is_sorted
		set_country_flag = rp_sort_policy_dec
		racial_list_policy_adder_races = yes
		racial_list_store_policy_vars = yes
		racial_list_sorting_algorithm = { sortvar = rpPolicyVar descending = yes }
	}
}
# Sort by policy count ascending
racial_list_sort_by_policy_asc = {
	if = { limit = { NOT = { has_country_flag = racial_pop_list_is_sorted } }
		set_country_flag = racial_pop_list_is_sorted
		set_country_flag = rp_sort_policy_asc
		racial_list_policy_adder_races = yes
		racial_list_store_policy_vars = yes
		racial_list_sorting_algorithm = { sortvar = rpPolicyVar ascending = yes }
	}
}

####################################
# Military menu scripted effects   #
####################################

#Interacts with old scripted effects, use RACE
racial_mil_effect_selector_dlc = {
	trigger_switch = {
		on_trigger = has_country_flag
		racial_mil_has_centaur_menu_open = { $effect$ = { RACE = centaur } }
		racial_mil_has_dwarven_menu_open = { $effect$ = { RACE = dwarven } }
		racial_mil_has_gnollish_menu_open = { $effect$ = { RACE = gnollish } }
		racial_mil_has_gnomish_menu_open = { $effect$ = { RACE = gnomish GNOMISH_ARTIFICERS = yes } }
		racial_mil_has_goblin_menu_open = { $effect$ = { RACE = goblin } }
		racial_mil_has_half_elven_menu_open = { $effect$ = { RACE = half_elven } }
		racial_mil_has_half_orcish_menu_open = { $effect$ = { RACE = half_orcish } }
		racial_mil_has_halfling_menu_open = { $effect$ = { RACE = halfling } }
		racial_mil_has_harimari_menu_open = { $effect$ = { RACE = harimari } }
		racial_mil_has_harpy_menu_open = { $effect$ = { RACE = harpy } }
		racial_mil_has_human_menu_open = { $effect$ = { RACE = human } }
		racial_mil_has_kobold_menu_open = { $effect$ = { RACE = kobold } }
		racial_mil_has_lizardfolk_menu_open = { $effect$ = { RACE = lizardfolk } }
		racial_mil_has_mechanim_menu_open = { $effect$ = { RACE = mechanim } }
		racial_mil_has_ogre_menu_open = { $effect$ = { RACE = ogre } }
		racial_mil_has_orcish_menu_open = { $effect$ = { RACE = orcish } }
		racial_mil_has_ruinborn_menu_open = { $effect$ = { RACE = ruinborn } }
		racial_mil_has_troll_menu_open = { $effect$ = { RACE = troll } }
		racial_mil_has_hobgoblin_menu_open = {
			if = { limit = { has_dlc = "Cradle of Civilization" }
				$effect$ = { RACE = hobgoblin }
			}
			else = {
				$effect$ = { RACE = hobgoblin NO_DLC_HOBGOBLIN = yes }
			}
		}
		racial_mil_has_elven_menu_open = {
			if = { limit = { has_dlc = "Cradle of Civilization" }
				$effect$ = { RACE = elven }
			}
			else = {
				$effect$ = { RACE = elven NO_DLC_ELVEN = yes }
			}
		}
		racial_mil_has_spirit_menu_open = { custom_tooltip = racil_mil_cannot_switch_special_military_tt }
		racial_mil_has_undead_menu_open = { custom_tooltip = racil_mil_cannot_switch_special_military_tt }
	}
}



# Uses racial_menu_tooltip_race_selector
racial_mil_selected_military_is_current_tt = {
	custom_tooltip = pop_military_current_tt
	tooltip = { add_country_modifier = { name = $RACE$_military duration = -1 desc = pop_military_modifier_duration_hidden } }
	if = { limit = { NOT = { has_dlc = "Cradle of Civilization" } }
		if = { limit = { has_country_modifier = hobgoblin_military }
			tooltip = { add_country_modifier = { name = hobgoblin_military_no_dlc duration = -1 desc = pop_military_modifier_duration_hidden } }
		}
		else_if = { limit = { has_country_modifier = elven_military }
			tooltip = { add_country_modifier = { name = elven_military_no_dlc duration = -1 desc = pop_military_modifier_duration_hidden } }
		}
	}
	if = {
		limit = { has_country_modifier = gnomish_military }
		tooltip = { add_country_modifier = { name = gnomish_military_artificer_buff duration = -1 } }
	}
}

#Interacts with old scripted effects, use RACE
racial_mil_cannot_change_to_selected_race_military = {
	custom_tooltip = pop_military_change_not_possible_tt
	if = { limit = { has_country_modifier = restructuring_military }
		custom_tooltip = racial_mil_is_restructuring_military_tt
	}
	if = {
		limit = {
			OR = {
				has_government_attribute = disables_swap_racial_mil
				has_country_flag = disable_racial_mil_swap_flag
			}
		}
		custom_tooltip = racial_mil_cannot_switch_gov_attribute_tt
	}
	if = { limit = { NOT = { mil_power = 200 } }
		custom_tooltip = pop_military_not_enough_milpower_tt
	}
	if = { limit = { NOT = { rp_high_tolerance_generic_race_trigger = yes } }
		custom_tooltip = pop_military_tolerance_too_low_tt
	}

	if = {
		limit = {
			NOT = {
				check_variable = { which = nb$RACE$CoredDev value = 30 }
				AND = {
					has_country_modifier = $RACE$_administration
					NOT = { has_country_flag = cannot_change_to_$RACE$_military_unless_enough_dev }
				}
			}
		}
		custom_tooltip = pop_military_dev_too_low_tt
		if = {
			limit = { has_country_modifier = $RACE$_administration }
			custom_tooltip = cannot_change_to_racial_military_unless_enough_dev
		}
	}

	custom_tooltip = pop_military_separator_tt
	tooltip = { add_country_modifier = { name = $RACE$_military duration = -1 desc = pop_military_modifier_duration_hidden } }

	[[NO_DLC_HOBGOBLIN]
		tooltip = { add_country_modifier = { name = hobgoblin_military_no_dlc duration = -1 desc = pop_military_modifier_duration_hidden} }
	]
	[[NO_DLC_ELVEN]
		tooltip = { add_country_modifier = { name = elven_military_no_dlc duration = -1 desc = pop_military_modifier_duration_hidden } }
	]
	[[GNOMISH_ARTIFICERS]
		tooltip = { add_country_modifier = { name = gnomish_military_artificer_buff duration = -1 } }
	]
}

#Interacts with, and is a modified version of old scripted effects, use RACE in caps
racial_mil_change_military_effect = {
	add_mil_power = -200
	clear_racial_military = yes

	add_country_modifier = { name = restructuring_military duration = 3650 }
	add_country_modifier = { name = $RACE$_military duration = -1 hidden = yes }
	tooltip = { add_country_modifier = { name = $RACE$_military duration = -1 } } #TODO Jothell check this works

	if = {
		limit = { has_country_modifier = gnomish_military }
		add_country_modifier = { name = gnomish_military_artificer_buff duration = -1 hidden = yes }
	}

	[[NO_DLC_HOBGOBLIN]
		add_country_modifier = { name = hobgoblin_military_no_dlc duration = -1 }
	]
	[[NO_DLC_ELVEN]
		add_country_modifier = { name = elven_military_no_dlc duration = -1 }
	]
	[[GNOMISH_ARTIFICERS]
		tooltip = { add_country_modifier = { name = gnomish_military_artificer_buff duration = -1 } }
		add_country_modifier = { name = gnomish_military_artificer_buff duration = -1 hidden = yes }
	]
}

racial_mil_change_mil_sub_effects = {
	racial_mil_niche_effects = yes
	racial_mil_military_change_tech = yes
	# update sprites to match new military
	custom_tooltip = update_unit_sprites_tooltip
	hidden_effect = { update_unit_sprites_for_racial_mil = yes }
}

racial_mil_niche_effects = {
	if = {
		limit = {
			has_country_modifier = beggaston_human_aux
			has_country_modifier = human_military
		}
		remove_country_modifier = beggaston_human_aux
		add_country_modifier = {
			name = beggaston_ruinborn_aux
			duration = -1
		}
	}
	else_if = {
		limit = {
			has_country_modifier = beggaston_ruinborn_aux
			has_country_modifier = ruinborn_military
		}
		remove_country_modifier = beggaston_ruinborn_aux
		add_country_modifier = {
			name = beggaston_human_aux
			duration = -1
		}
	}
	else_if = {
		limit = {
			has_country_modifier = beggaston_human_aux
			NOT = { has_country_modifier = ruinborn_military }
		}
		remove_country_modifier = beggaston_human_aux
	}
	else_if = {
		limit = {
			has_country_modifier = beggaston_ruinborn_aux
			NOT = { has_country_modifier = human_military }
		}
		remove_country_modifier = beggaston_ruinborn_aux
	}

	z22_niche_mil_effects_check = yes
}

update_unit_sprites_for_racial_mil = {
	if = {
		limit = { has_country_modifier = human_military }
		
		# rahen
		if = {
			limit = { capital_scope = { superregion = rahen_superregion } }
			custom_tooltip = swap_to_human_raheni_sprites_tooltip
			hidden_effect = { apply_sprite_pack = indiangfx_sprite_pack }
		}
		
		# vimdatrong + yanshen
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = vimdatrong_superregion
						superregion = yanshen_superregion
					}
				}
			}
			custom_tooltip = swap_to_human_yanshen_sprites_tooltip
			hidden_effect = { apply_sprite_pack = asiangfx_sprite_pack }
		}

		# north haless + forbidden plains
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = gozengun_superregion
						superregion = forbidden_lands_superregion
					}
				}
			}
			custom_tooltip = swap_to_human_triunic_sprites_tooltip
			hidden_effect = { apply_sprite_pack = triunicgfx_sprite_pack }
		}

		# east sarhal + south sarhal
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = east_sarhal_superregion
						superregion = djinnakah_superregion
						superregion = taneyas_superregion
					}
				}
			}
			custom_tooltip = swap_to_human_east_sarhal_sprites_tooltip
			hidden_effect = { apply_sprite_pack = africangfx_sprite_pack }
		}
		
		# west sarhal + north salahad + south_salahad + bulwar
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = fangaula_superregion
						superregion = north_salahad_superregion
						superregion = south_salahad_superregion
						superregion = bulwar_superregion
					}
				}
			}
			custom_tooltip = swap_to_human_bulwar_sprites_tooltip
			hidden_effect = { apply_sprite_pack = muslimgfx_sprite_pack }
		}
		
		# aelantir colonisers
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						continent = north_america
						continent = south_america
					}
				}
			}
			custom_tooltip = swap_to_human_aelantir_sprites_tooltip
			hidden_effect = { apply_sprite_pack = divenhalgfx_sprite_pack }
		}
		
		# cannor and gerudia (default fallback)
		else = {
			custom_tooltip = swap_to_human_cannorian_sprites_tooltip
			hidden_effect = { apply_sprite_pack = westerngfx_sprite_pack }
		}
	}

	else_if = {
		limit = { has_country_modifier = elven_military }
		
		# wood elf
		if = {
			limit = { capital_scope = { superregion = deepwoods_superregion } }
			custom_tooltip = swap_to_wood_elven_sprites_tooltip
			hidden_effect = { apply_sprite_pack = moon_elf_sprite_pack }
			#TODO update to different sprite packs when other elf sprite packs are made
		}

		# desert elf
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						region = far_salahad_region
						region = far_bulwar_region
					}
				}
			}
			custom_tooltip = swap_to_desert_elven_sprites_tooltip
			hidden_effect = { apply_sprite_pack = moon_elf_sprite_pack }
			#TODO update to different sprite packs when other elf sprite packs are made
		}
		
		# sun elf (and colonizers)
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = bulwar_superregion
						continent = south_america
					}
				}
			}
			custom_tooltip = swap_to_sun_elven_sprites_tooltip
			hidden_effect = { apply_sprite_pack = moon_elf_sprite_pack }
			#TODO update to different sprite packs when other elf sprite packs are made
		}
		
		# moon elf (default fallback)
		else = {
			custom_tooltip = swap_to_moon_elven_sprites_tooltip
			hidden_effect = { apply_sprite_pack = moon_elf_sprite_pack }
		}
	}

	else_if = {
		limit = { has_country_modifier = dwarven_military }
		custom_tooltip = swap_to_dwarven_sprites_tooltip
		hidden_effect = { apply_sprite_pack = group_dwarves_sprite_pack }
	}
	
	else_if = {
		limit = { has_country_modifier = halfling_military }
		# TODO update if halflings get unique models
		
		# vzyemby
		if = {
			limit = { capital_scope = { region = fahvanosy_region } }
			custom_tooltip = swap_to_vyzemby_halfling_sprites_tooltip
			hidden_effect = { apply_sprite_pack = africangfx_sprite_pack }
		}
		
		# redfoot (default fallback)
		else = {
			custom_tooltip = swap_to_redfoot_halfling_sprites_tooltip
			hidden_effect = { apply_sprite_pack = redfoot_sprite_pack }
		}
	}

	else_if = {
		limit = { has_country_modifier = gnomish_military }
		# TODO update if gnomes get unique models
		custom_tooltip = swap_to_gnomish_sprites_tooltip
		hidden_effect = { apply_sprite_pack = westerngfx_sprite_pack }
	}

	else_if = {
		limit = { has_country_modifier = kobold_military }

		# greenscale
		if = {
			limit = { capital_scope = { region = alenic_frontier_region } }
			custom_tooltip = swap_to_greenscale_kobold_sprites_tooltip
			hidden_effect = { apply_sprite_pack = greenscale_sprite_pack }
		}
		
		# goldscale
		else_if = {
			limit = { capital_scope = { continent = asia } }
			custom_tooltip = swap_to_goldscale_kobold_sprites_tooltip
			hidden_effect = { apply_sprite_pack = goldscale_sprite_pack }
		}

		# redscale (default fallback)
		else = {
			custom_tooltip = swap_to_redscale_kobold_sprites_tooltip
			hidden_effect = { apply_sprite_pack = redscale_sprite_pack }
		}
	}

	else_if = {
		limit = { has_country_modifier = orcish_military }
		# these are reskinned DLC skins, so if you swap to orcish without having the DLC, nothing happens	
	
		# gray orc
		if = {
			limit = { capital_scope = { superregion = gerudia_superregion } }
			custom_tooltip = swap_to_gray_orcish_sprites_tooltip
			hidden_effect = { apply_sprite_pack = gray_orc_sprite_pack }
		}
		
		# black orc
		else_if = {
			limit = { capital_scope = { continent = serpentspine } }
			custom_tooltip = swap_to_black_orcish_sprites_tooltip
			hidden_effect = { apply_sprite_pack = black_orc_sprite_pack }
		}
		
		# brown orc
		else_if = {
			limit = { capital_scope = { continent = asia } }
			custom_tooltip = swap_to_brown_orcish_sprites_tooltip
			hidden_effect = { apply_sprite_pack = brown_orc_sprite_pack }
		}
		
		# green orc (default fallback)
		else = {
			custom_tooltip = swap_to_green_orcish_sprites_tooltip
			hidden_effect = { apply_sprite_pack = green_orc_sprite_pack }
		}
	}

	else_if = {
		limit = { has_country_modifier = half_orcish_military }
		# TODO update if half orcs get unique models

		# rahen (command slave states)
		if = {
			limit = { capital_scope = { continent = asia } }
			custom_tooltip = swap_to_raheni_half_orcish_sprites_tooltip
			hidden_effect = { apply_sprite_pack = indiangfx_sprite_pack }
		}

		# cannor (default fallback)
		else = {
			custom_tooltip = swap_to_cannorian_half_orcish_sprites_tooltip
			hidden_effect = { apply_sprite_pack = westerngfx_sprite_pack }
		}
	}

	else_if = {
		limit = { has_country_modifier = gnollish_military }
		custom_tooltip = swap_to_gnollish_sprites_tooltip
		hidden_effect = { apply_sprite_pack = gnoll_sprite_pack }
	}

	else_if = {
		limit = { has_country_modifier = ruinborn_military }
		
		# kheionai
		if = {
			limit = { capital_scope = { superregion = kheionai_superregion } }
			custom_tooltip = swap_to_kheionai_ruinborn_sprites_tooltip
			hidden_effect = { apply_sprite_pack = kheionai_cool_units_sprite_pack }
		}
		
		# eordand and taychend
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = eordand_superregion
						superregion = taychend_superregion
					}
				}
			}
			custom_tooltip = swap_to_eordand_ruinborn_sprites_tooltip
			hidden_effect = { apply_sprite_pack = southamericagfx_sprite_pack }
		}
		
		# effelai, ruin proper and torn gates
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = effelai_superregion
						superregion = ruin_proper_superregion
						superregion = torn_gates_superregion
					}
				}
			}
			custom_tooltip = swap_to_effelai_ruinborn_sprites_tooltip
			hidden_effect = { apply_sprite_pack = northamericagfx_sprite_pack }
		}
		
		# ynnic (default fallback)
		else = {
			custom_tooltip = swap_to_ynnic_ruinborn_sprites_tooltip
			hidden_effect = { apply_sprite_pack = easterngfx_sprite_pack }
		}
	}

	else_if = {
		limit = { has_country_modifier = goblin_military }
		
		# exodus goblin
		if = {
			limit = { capital_scope = { superregion = bulwar_superregion } }
			custom_tooltip = swap_to_exodus_goblin_sprites_tooltip
			hidden_effect = { apply_sprite_pack = exodus_goblin_sprite_pack }
		}
		
		# forest goblin
		else_if = {
			limit = { capital_scope = { superregion = deepwoods_superregion } }
			custom_tooltip = swap_to_forest_goblin_ruinborn_sprites_tooltip
			hidden_effect = { apply_sprite_pack = forest_goblin_sprite_pack }
		}
		
		# cave goblin
		else_if = {
			limit = { capital_scope = { continent = serpentspine } }
			custom_tooltip = swap_to_cave_goblin_sprites_tooltip
			hidden_effect = { apply_sprite_pack = cave_goblin_sprite_pack }
		}
		
		# common goblin (default fallback)
		else = {
			custom_tooltip = swap_to_common_goblin_sprites_tooltip
			hidden_effect = { apply_sprite_pack = common_goblin_sprite_pack }
		}
	}

	else_if = {
		limit = { has_country_modifier = harpy_military }
		custom_tooltip = swap_to_harpy_sprites_tooltip
		hidden_effect = { apply_sprite_pack = harpy_sprite_pack }
	}

	else_if = {
		limit = { has_country_modifier = troll_military }
		# TODO update if trolls get regional unique models

		custom_tooltip = swap_to_swamp_troll_sprites_tooltip
		hidden_effect = { apply_sprite_pack = troll_sprite_pack }
	}

	else_if = {
		limit = { has_country_modifier = half_elven_military }
		# TODO update if half elves get unique models
		
		# bulwar + far salahad
		if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = bulwar_superregion
						region = far_salahad_region
					}
				}
			}
			custom_tooltip = swap_to_bulwari_half_elven_sprites_tooltip
			hidden_effect = { apply_sprite_pack = muslimgfx_sprite_pack }
		}
		
		# cannor (default fallback)
		else = {
			custom_tooltip = swap_to_cannorian_half_elven_sprites_tooltip
			hidden_effect = { apply_sprite_pack = westerngfx_sprite_pack }
		}
	}

	else_if = {
		limit = { has_country_modifier = harimari_military }
		custom_tooltip = swap_to_harimari_sprites_tooltip
		hidden_effect = { apply_sprite_pack = harimari_sprite_pack }
	}
	
	else_if = {
		limit = { has_country_modifier = hobgoblin_military }
		custom_tooltip = swap_to_hobgoblin_sprites_tooltip
		hidden_effect = { apply_sprite_pack = hobgoblin_sprite_pack }
	}
	
	else_if = {
		limit = { has_country_modifier = centaur_military }
		custom_tooltip = swap_to_centaur_sprites_tooltip
		hidden_effect = { apply_sprite_pack = centaur_sprite_pack }
	}
	
	else_if = {
		limit = { has_country_modifier = ogre_military }
		# TODO update if ogres get unique models
		
		# oni
		if = {
			limit = { capital_scope = { region = demon_hills_region } }
			custom_tooltip = swap_to_oni_sprites_tooltip
			hidden_effect = { apply_sprite_pack = ogre_sprite_pack }
		}
		
		# forbidden plains/miremaw ogres (default fallback)
		else = {
			custom_tooltip = swap_to_ogre_sprites_tooltip
			hidden_effect = { apply_sprite_pack = ogre_sprite_pack }
		}
	}
	
	else_if = {
		limit = { has_country_modifier = lizardfolk_military }
		# TODO update if lizardfolk get unique models
		custom_tooltip = swap_to_lizardfolk_sprites_tooltip
		hidden_effect = { apply_sprite_pack = muslimgfx_sprite_pack }
	}

	else_if = {
		limit = { has_country_modifier = mechanim_military }
		# TODO update if mechanim get unique models
		custom_tooltip = swap_to_mechanim_sprites_tooltip
		hidden_effect = { apply_sprite_pack = asiangfx_sprite_pack }
	}
}


# If you make changes here, please make similar changes to the following scipted_effects/triggers:
## racial_mil_military_change_tech
## reset_racial_military_via_administration
## racial_modifiers.6
## has_unmatching_military_to_unit
racial_mil_military_change_tech = {
	if = { # Effects for elves
		limit = { has_country_flag = racial_mil_has_elven_menu_open }
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = deepwoods_superregion }
					primary_culture = wood_elf
					AND = {
						accepted_culture = wood_elf
						NOT = { culture_group = elven }
					}
				}
			}
			change_unit_type = tech_wood_elf
		}
		else_if = {
			limit = {
				OR = {
					primary_culture = sun_elf
					primary_culture = dawn_elf
					primary_culture = desert_elf
					primary_culture = sunrise_elf
					primary_culture = sunset_elf
					capital_scope = { continent = asia }
					capital_scope = { continent = africa }
					AND = {
						religion_group = bulwari
						OR = {
							capital_scope = { continent = north_america }
							capital_scope = { continent = south_america }
						}
					}
					AND = {
						NOT = { culture_group = elven }
						OR = {
							accepted_culture = sun_elf
							accepted_culture = dawn_elf
							accepted_culture = desert_elf
							accepted_culture = sunrise_elf
							accepted_culture = sunset_elf
						}
					}
				}
			}
			change_unit_type = tech_east_elven
		}
		else = {
			change_unit_type = tech_elven
		}
	}
	else_if = { # Effects for half-orcs
		limit = { has_country_flag = racial_mil_has_half_orcish_menu_open }
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = gerudia_superregion }
					primary_culture = grombar_half_orc
					primary_culture = grombar_orc
					primary_culture = gray_orc
					AND = {
						accepted_culture = grombar_half_orc
						NOT = { culture_is_half_orcish = yes }
					}
					AND = {
						accepted_culture = grombar_orc
						NOT = { culture_is_half_orcish = yes }
					}
					AND = {
						accepted_culture = gray_orc
						NOT = { culture_is_half_orcish = yes }
					}
				}
			}
			change_unit_type = tech_gerudian
		}
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = rahen_superregion
						region = xianjie_region
					}
				}
			}
			change_unit_type = tech_raheni
		}
		else = {
			change_unit_type = tech_cannorian
		}
	}
	else_if = { # Effects for harimari
		limit = { has_country_flag = racial_mil_has_harimari_menu_open }
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = vimdatrong_superregion }
					capital_scope = { superregion = gozengun_superregion }
					primary_culture = serene_harimari
					primary_culture = roaming_harimari
					AND = {
						accepted_culture = serene_harimari
						NOT = { culture_group = harimari }
					}
					AND = {
						accepted_culture = roaming_harimari
						NOT = { culture_group = harimari }
					}
				}
			}
			change_unit_type = tech_east_harimari
		}
		else = {
			change_unit_type = tech_west_harimari
		}
	}
	else_if = { # Effects for harpies
		limit = { has_country_flag = racial_mil_has_harpy_menu_open }
		if = {
			limit = {
				OR ={
					primary_culture = siadunan_harpy
					AND = {
						accepted_culture = siadunan_harpy
						NOT = { culture_group = harpy }
					}
				}
			}
			change_unit_type = tech_siadunan_harpy
		}
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = vimdatrong_superregion }
					capital_scope = { superregion = gozengun_superregion }
					primary_culture = pezarangi_harpy
					primary_culture = reishao_harpy
					AND = {
						accepted_culture = pezarangi_harpy
						NOT = { culture_group = harpy }
					}
					AND = {
						accepted_culture = reishao_harpy
						NOT = { culture_group = harpy }
					}
				}
			}
			change_unit_type = tech_pezarangi_harpy
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = north_salahad_superregion }
					capital_scope = { superregion = tanib_dajek_superregion }
					capital_scope = { superregion = fangaula_superregion }
					primary_culture = nzeri_harpy
					AND = {
						accepted_culture = nzeri_harpy
						NOT = { culture_group = harpy }
					}
				}
			}
			change_unit_type = tech_nzeri_harpy
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = gozengun_superregion }
					primary_culture = nuzenapu_harpy
					AND = {
						accepted_culture = nuzenapu_harpy
						NOT = { culture_group = harpy }
					}
				}
			}
			change_unit_type = tech_nuzenapu_harpy
		}
		else = {
			change_unit_type = tech_firanyan_harpy
		}
	}
	else_if = { # Effects for humans
		limit = { has_country_flag = racial_mil_has_human_menu_open }
		if = { limit = { capital_scope = { superregion = bulwar_superregion } }
			change_unit_type = tech_bulwari
		}
		else_if = { limit = { capital_scope = { superregion = north_salahad_superregion } }
			change_unit_type = tech_salahadesi
		}
		else_if = { limit = { capital_scope = { superregion = south_salahad_superregion } }
			change_unit_type = tech_salahadesi
		}
		### Not sure if this or the other, there's two versions
		else_if = {
			limit = { capital_scope = { superregion = tanib_dajek_superregion } }
			if = {
				limit = {
					OR = {
						accepted_culture = tanizu
						accepted_culture = antmvura
						accepted_culture = kombedak
						accepted_culture = umsozidak
						accepted_culture = wakoodak
					}
					NOT = { culture_group = inyaswarosa }
				}
				change_unit_type = tech_inyaswarosa
			}
			else = { change_unit_type = tech_west_sarhaly }
		}

		### The other
		# else_if = {
		# 	limit = { capital_scope = { superregion = tanib_dajek_superregion } }
		# 	change_unit_type = tech_west_sarhaly
		# }
		# else_if = {
		# 	limit = {
		# 		capital_scope = { superregion = east_sarhal_superregion }
		# 	}
		# 	if = {
		# 		limit = { 
		# 			OR = {
		# 				accepted_culture = tanizu
		# 				accepted_culture = antmvura
		# 				accepted_culture = kombedak
		# 				accepted_culture = umsozidak
		# 				accepted_culture = wakoodak
		# 			}
		# 			NOT = { culture_group = inyaswarosa }
		# 		}
		# 		change_unit_type = tech_inyaswarosa
		# 	}
		# 	else = { change_unit_type = tech_east_sarhaly }
		# }


		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = djinnakah_superregion
						superregion = taneyas_superregion
					}
				}
			}
			if = {
				limit = {
					OR = {
						accepted_culture = suhratbi
						accepted_culture = dhebiji
						accepted_culture = guryadagga
						accepted_culture = ashamadi
					}
					NOT = { culture_group = baashidi }
				}
				change_unit_type = tech_baashidi
			}
			else = { change_unit_type = tech_south_sarhaly }
		}
		else_if = { limit = { capital_scope = { superregion = east_sarhal_superregion } }	#wingren again
			change_unit_type = tech_east_sarhaly
		}
		else_if = { limit = { capital_scope = { superregion = rahen_superregion } }
			change_unit_type = tech_raheni
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = vimdatrong_superregion }
				}
			}
			change_unit_type = tech_halessi
		}
		else_if = { limit = { capital_scope = { superregion = gozengun_superregion } }
			if = { limit = { primary_culture = shuvuush }
				change_unit_type = tech_shuvuush
			}
			else = {
				change_unit_type = tech_wastelander
			}
		}
		else_if = { limit = { capital_scope = { superregion = forbidden_lands_superregion } }
			change_unit_type = tech_triunic
		}
		else_if = { limit = { capital_scope = { superregion = gerudia_superregion } }
			change_unit_type = tech_gerudian
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = broken_lands_superregion }
					capital_scope = { superregion = eordand_superregion }
					capital_scope = { superregion = ynn_superregion }
				}
			}
			change_unit_type = tech_ynnsmen
		}
		else = {
			change_unit_type = tech_cannorian
		}
	}
	else_if = { # Effects for kobolds
		limit = { has_country_flag = racial_mil_has_kobold_menu_open }
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = vimdatrong_superregion }
					capital_scope = { superregion = gozengun_superregion }
					capital_scope = { superregion = rahen_superregion }
					primary_culture = goldscale_kobold
					primary_culture = dragonfire_kobold
					AND = {
						accepted_culture = goldscale_kobold
						NOT = { culture_group = kobold }
					}
					AND = {
						accepted_culture = dragonfire_kobold
						NOT = { culture_group = kobold }
					}
				}
			}
			change_unit_type = tech_east_kobold
		}
		else_if = {
			limit = {
				capital_scope = { continent = serpentspine }
			}
			change_unit_type = tech_darkscale_kobold
		}
		else = {
			change_unit_type = tech_kobold
		}
	}
	else_if = { # Effects for ogres
		limit = { has_country_flag = racial_mil_has_ogre_menu_open }
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = vimdatrong_superregion }
					capital_scope = { superregion = rahen_superregion }
					primary_culture = horned_ogre
					AND = {
						accepted_culture = horned_ogre
						NOT = { culture_group = ogre }
					}
				}
			}
			change_unit_type = tech_eastern_ogre
		}
		else_if = {
			limit = {
				capital_scope = { region = nomsyulhan_region }
			}
			change_unit_type = tech_soulseeker_ogre
		}
		else_if = {
			limit = { capital_scope = { superregion = fangaula_superregion } }
			change_unit_type = tech_dunesole_ogre
		}
		else = {
			change_unit_type = tech_ogre	#may need custom one
		}
		#No idea if this is meant to be an additional case for "tech_soulseeker_ogre"
		#There was no effect in "anb_scripted_effects_for_racial_tolerances.txt"
		# else_if = {
		# 	limit = {
		# 		OR = {
		# 			capital_scope = { superregion = gozengun_superregion }
		# 			AND = {
		# 				accepted_culture = soulseeker_ogre
		# 				NOT = { culture_group = ogre }
		# 			}
		# 		}
		# 	}
		# }
	}
	else_if = { # Effects for orcs
		limit = { has_country_flag = racial_mil_has_orcish_menu_open }
		if = {
			limit = {
				OR = {
					capital_scope = {
						continent = serpentspine
					}
					dwarovar_orc_culture_primary = yes
					AND = {
						dwarovar_orc_culture_accepted = yes
						NOT = { culture_group = orcish }
					}
				}
			}
			change_unit_type = tech_black_orcish
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = {
						continent = asia
						NOT = { superregion = forbidden_lands_superregion }
					}
					primary_culture = brown_orc
					AND = {
						accepted_culture = brown_orc
						NOT = { culture_group = orcish }
					}
				}
			}
			change_unit_type = tech_east_orcish
		}
		else = {
			change_unit_type = tech_orcish
		}
	}
	else_if = { # Effects for ruinborn
		limit = { has_country_flag = racial_mil_has_ruinborn_menu_open }
		if = {
			limit = {
				OR = {
					capital_scope = { superregion = ynn_superregion }
					capital_scope = { region = forest_of_the_cursed_ones_region }
				}
			}
			change_unit_type = tech_ynnic
		}
		else_if = { limit = { capital_scope = { superregion = eordand_superregion } }
			change_unit_type = tech_eordand
		}
		else_if = {
			limit = {
				OR = {
					culture_group = devandi_ruinborn_elf
					culture_group = eltibhari_ruinborn_elf
					capital_scope = { region = chendhya_region }
				}
			}
			change_unit_type = tech_bharbhen
		}
		else_if = { limit = { capital_scope = { superregion = kheionai_superregion } }
			change_unit_type = tech_kheionai
		}
		else_if = { limit = { capital_scope = { superregion = taychend_superregion } }
			change_unit_type = tech_taychendi
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { region = haraf_region }
					capital_scope = { region = tor_nayyi_region }
				}
			}
			change_unit_type = tech_harafic
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = broken_lands_superregion }
					capital_scope = { superregion = ruin_proper_superregion }
				}
			}
			change_unit_type = tech_noruin
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = effelai_superregion }
					capital_scope = { region = amadia_region }
				}
			}
			if = {
				limit = {
					OR = {
						culture_group = eltibhari_ruinborn_elf
						culture_group = devandi_ruinborn_elf
					}
				}
				change_unit_type = tech_bharbhen
			}
			else = {
				change_unit_type = tech_south_aelantiri
			}
		}
		else = {
			change_unit_type = tech_noruin
		}
	}
	else_if = { # Effects for trolls
		limit = { has_country_flag = racial_mil_has_troll_menu_open }
		if = {
			limit = {
				OR = {
					# Pick a capital scope
					# capital_scope = { region = shadow_swamp_region }
					capital_scope = { superregion = east_sarhal_superregion }
					primary_culture = swamp_troll
					AND = {
						accepted_culture = swamp_troll
						NOT = { culture_group = giantkind }
					}
				}
			}
			change_unit_type = tech_swamp_troll
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = {
						continent = asia
						NOT = { superregion = forbidden_lands_superregion } 
					}
					primary_culture = hill_troll
					AND = {
						accepted_culture = hill_troll
						NOT = { culture_group = giantkind }
					}
				}
			}
			change_unit_type = tech_hill_troll
        }
		else = {
			change_unit_type = tech_northern_troll	#may need custom one
		}
	}
	else_if = { # Effects for halflings
		limit = { has_country_flag = racial_mil_has_halfling_menu_open }
		if = {
			limit = {
				OR = {
					capital_scope = {
						superregion = tanib_dajek_superregion
					}
					is_vyzemby_primary_culture = yes
					AND = {
						OR = {
							accepted_culture = amezatany
							accepted_culture = mboala
							accepted_culture = mazava
							accepted_culture = fomarati
							accepted_culture = vyoronsi
							accepted_culture = zohebidi
						}
						NOT = { is_vyzemby_primary_culture = yes }
					}
				}
			}
			change_unit_type = tech_vyzemby
		}
		else = {
			change_unit_type = tech_halfling	#may need custom one
		}
	}
	else_if = { # Effects for goblins
		limit = { has_country_flag = racial_mil_has_goblin_menu_open }
		if = {
			limit = {
				OR = { #Forest Goblin
					capital_scope = { superregion = deepwoods_superregion }
					primary_culture = forest_goblin
					AND = {
						accepted_culture = forest_goblin
						NOT = { culture_group = goblin }
					}
				}
			}
			change_unit_type = tech_forest_goblin
		}
		else_if = {
			limit = {
				OR = { #Exodus Goblin
					capital_scope = { superregion = bulwar_superregion }
					primary_culture = exodus_goblin
					AND = {
						accepted_culture = exodus_goblin
						NOT = { culture_group = goblin }
					}
				}
			}
			change_unit_type = tech_exodus_goblin
		}
		else_if = {
			limit = {
				OR = { #Cave Goblin
					capital_scope = { continent = serpentspine }
					dwarovar_goblin_culture_primary = yes
					AND = {
						dwarovar_goblin_culture_accepted = yes
						NOT = { culture_group = goblin }
					}
				}
			}
			change_unit_type = tech_cave_goblin
		}
		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = east_serpentspine_superregion
						continent = asia
					}
				}
			}
			change_unit_type = tech_east_cave_goblin
		}
		else = { #Common Goblin (Fallback if all other conditions fail)
			change_unit_type = tech_goblin
		}
	}
	else_if = { #Effects for centaurs
		limit = { has_country_flag = racial_mil_has_centaur_menu_open }
		change_unit_type = tech_centaur
	}
	else_if = { #Effects for gnolls
		limit = { has_country_flag = racial_mil_has_gnollish_menu_open }
		change_unit_type = tech_gnollish
	}
	else_if = { #Effects for gnomes
		limit = { has_country_flag = racial_mil_has_gnomish_menu_open }
		change_unit_type = tech_gnomish
	}
	else_if = { #Effects for hobgoblins
		limit = { has_country_flag = racial_mil_has_hobgoblin_menu_open }
		if = {
			limit = { capital_scope = { superregion = gozengun_superregion } }
			change_unit_type = tech_eagle_hobgoblin
		}
		else = { change_unit_type = tech_hobgoblin }
	}
	else_if = { #Effects for lizardfolk
		limit = { has_country_flag = racial_mil_has_lizardfolk_menu_open }
		change_unit_type = tech_lizardfolk
	}
	else_if = { #Effects for mechanim
		limit = { has_country_flag = racial_mil_has_mechanim_menu_open }
		change_unit_type = tech_mechanim
	}
	else_if = { #Effects for dwarves
		limit = { has_country_flag = racial_mil_has_dwarven_menu_open }
		if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = east_serpentspine_superregion
						continent = asia
					}
				}
			}
			change_unit_type = tech_east_dwarven
		}
		else = {
			change_unit_type = tech_west_dwarven
		}
	}
	else_if = { #Effects for half-elves
		#The same as humans
		limit = { has_country_flag = racial_mil_has_half_elven_menu_open }
		if = { limit = { capital_scope = { superregion = bulwar_superregion } }
			change_unit_type = tech_bulwari
		}
		else_if = { limit = { capital_scope = { superregion = north_salahad_superregion } }
			change_unit_type = tech_salahadesi
		}
		else_if = { limit = { capital_scope = { superregion = south_salahad_superregion } }
			change_unit_type = tech_salahadesi
		}
		### Not sure if this or the other, there's two versions
		else_if = {
			limit = { capital_scope = { superregion = tanib_dajek_superregion } }
			if = {
				limit = {
					OR = {
						accepted_culture = tanizu
						accepted_culture = antmvura
						accepted_culture = kombedak
						accepted_culture = umsozidak
						accepted_culture = wakoodak
					}
					NOT = { culture_group = inyaswarosa }
				}
				change_unit_type = tech_inyaswarosa
			}
			else = { change_unit_type = tech_west_sarhaly }
		}

		### The other
		# else_if = {
		# 	limit = { capital_scope = { superregion = tanib_dajek_superregion } }
		# 	change_unit_type = tech_west_sarhaly
		# }
		# else_if = {
		# 	limit = {
		# 		capital_scope = { superregion = east_sarhal_superregion }
		# 	}
		# 	if = {
		# 		limit = { 
		# 			OR = {
		# 				accepted_culture = tanizu
		# 				accepted_culture = antmvura
		# 				accepted_culture = kombedak
		# 				accepted_culture = umsozidak
		# 				accepted_culture = wakoodak
		# 			}
		# 			NOT = { culture_group = inyaswarosa }
		# 		}
		# 		change_unit_type = tech_inyaswarosa
		# 	}
		# 	else = { change_unit_type = tech_east_sarhaly }
		# }


		else_if = {
			limit = {
				capital_scope = {
					OR = {
						superregion = djinnakah_superregion
						superregion = taneyas_superregion
					}
				}
			}
			if = {
				limit = {
					OR = {
						accepted_culture = suhratbi
						accepted_culture = dhebiji
						accepted_culture = guryadagga
						accepted_culture = ashamadi
					}
					NOT = { culture_group = baashidi }
				}
				change_unit_type = tech_baashidi
			}
			else = { change_unit_type = tech_south_sarhaly }
		}
		else_if = { limit = { capital_scope = { superregion = east_sarhal_superregion } }	#wingren again
			change_unit_type = tech_east_sarhaly
		}
		else_if = { limit = { capital_scope = { superregion = rahen_superregion } }
			change_unit_type = tech_raheni
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = yanshen_superregion }
					capital_scope = { superregion = vimdatrong_superregion }
				}
			}
			change_unit_type = tech_halessi
		}
		else_if = { limit = { capital_scope = { superregion = gozengun_superregion } }
			if = { limit = { primary_culture = shuvuush }
				change_unit_type = tech_shuvuush
			}
			else = {
				change_unit_type = tech_wastelander
			}
		}
		else_if = { limit = { capital_scope = { superregion = forbidden_lands_superregion } }
			change_unit_type = tech_triunic
		}
		else_if = { limit = { capital_scope = { superregion = gerudia_superregion } }
			change_unit_type = tech_gerudian
		}
		else_if = {
			limit = {
				OR = {
					capital_scope = { superregion = broken_lands_superregion }
					capital_scope = { superregion = eordand_superregion }
					capital_scope = { superregion = ynn_superregion }
				}
			}
			change_unit_type = tech_ynnsmen
		}
		else = {
			change_unit_type = tech_cannorian
		}
	}
}