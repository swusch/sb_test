
po_eat_the_ruler = {
	# The following strings need localization: 
	#		"make_dummy_desc" (uses text processing, supporting bracket notation) ("[FROM.GetName] becomes a [THIS.GetName] Dummy")
	#		"CB_ALLOWED_make_dummy" (uses plain localization) ("Enforced Dumbness")
	#		"PEACE_make_dummy" (uses plain localization, but with support for $TAKER$, $TAKERS$, $GIVER$ and $GIVERS$) ("Become $TAKERS$ Dummy")
	category = 6 
	power_projection = humiliated_rival 
	power_cost_base = 0.0 
	prestige_base = 0.01 # Should be 1 prestige per province
	ae_base = 0.0 
	warscore_cost = {
		all_provinces = 0.0
		no_provinces = 90.0
		owner_keeps = 0.0 
		conquered = 0.0 
		returned_core = 0.0
		released_nation = 0.0 
		cancelled_subject = 0.0 
		concede_colonial_region = 0.0
	}
	warscore_cap = 90
	requires_demand_independence = yes 
	is_make_subject = no
	requires_is_allowed = yes
	
	is_visible = { #Needs to always be possible so that you can use it and take provinces
		has_country_flag = can_eat_ruler_flag
	}
	is_allowed = { # Defaults to equivalent of "always = yes"
		#You need to control their capital
		FROM = {
			capital_scope = {
				NOT = { controlled_by = FROM }
			}
		}
	}
	effect = { # Defaults to empty effect (which makes error log entry but is safe)
		FROM = {
			hidden_effect = {
				every_owned_province = { set_province_flag = zokka_eat_ruler_flag }
				country_event = { id = flavour_zokka.300 }
			}
			custom_tooltip = zokka_devour_tt
			release_all_possible_countries = yes
			release_all_subjects = yes
		}
		hidden_effect = {
			every_province = {
				limit = { has_province_flag = zokka_eat_ruler_flag }
				if = {
					limit = { is_capital = yes }
					owner = { add_truce_with = F29 }
					clr_province_flag = zokka_eat_ruler_flag
				}
				else = { clr_province_flag = zokka_eat_ruler_flag }
			}
		}
		hidden_effect = {
			if = {
				limit = { FROM = { tag = R62 } NOT = { has_global_flag = grand_marshal_eaten_by_zokka } }
				set_global_flag = grand_marshal_eaten_by_zokka
			}
		}
		add_patriarch_authority = 0.2
	}
	ai_weight = { # Defaults to always evaluate to 0
		export_to_variable = {
			variable_name = ai_value # Mandatory to have entry called "ai_value". Its value at the end of the ai_weight scope is what will be used
			value = trigger_value:always
		}
		set_variable = {
			ai_value = 2000
		}
		limit = { # if limit evaluates false, ai_weight will evaluate to 0 regardless
			capital_scope = {
				NOT = { controlled_by = FROM }
			}
		}
	}
}
